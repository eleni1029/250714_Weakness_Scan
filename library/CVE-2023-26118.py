"""
CVE-2023-26118 Vulnerability Detection Script
Angular dependency vulnerability detection for TronClass LMS
"""

import requests
import re
import json
from urllib.parse import urljoin

def scan(session, target_url):
    """
    Scan for CVE-2023-26118 vulnerability
    Angular dependency and package vulnerability
    """
    result = {
        'vulnerable': False,
        'evidence': '',
        'description': 'CVE-2023-26118: Angular dependency vulnerability affecting package security',
        'remediation': 'Update Angular dependencies to latest secure versions and audit npm packages'
    }
    
    try:
        # Check for Angular usage
        response = session.get(target_url, timeout=30)
        
        angular_indicators = [
            'angular.js',
            'angular.min.js',
            '@angular/core',
            '@angular/common',
            'angular-cli',
            'ng-version'
        ]
        
        uses_angular = any(indicator in response.text.lower() for indicator in angular_indicators)
        
        if not uses_angular:
            result['evidence'] = "Angular framework not detected"
            return result
        
        # Check for package.json or manifest files
        manifest_endpoints = [
            '/package.json',
            '/manifest.json',
            '/bower.json',
            '/package-lock.json',
            '/npm-shrinkwrap.json'
        ]
        
        vulnerable_packages = []
        
        for endpoint in manifest_endpoints:
            try:
                response = session.get(urljoin(target_url, endpoint), timeout=30)
                if response.status_code == 200:
                    try:
                        manifest_data = json.loads(response.text)
                        
                        # Check for vulnerable Angular versions
                        dependencies = manifest_data.get('dependencies', {})
                        dev_dependencies = manifest_data.get('devDependencies', {})
                        all_deps = {**dependencies, **dev_dependencies}
                        
                        for package, version in all_deps.items():
                            if 'angular' in package.lower():
                                # Check for known vulnerable versions
                                if any(vuln in version for vuln in ['<15.0.0', '<14.2.0', '<13.3.0']):
                                    vulnerable_packages.append(f"{package}:{version}")
                        
                        if vulnerable_packages:
                            result['vulnerable'] = True
                            result['evidence'] = f"Vulnerable Angular packages found in {endpoint}: {', '.join(vulnerable_packages)}"
                            return result
                            
                    except json.JSONDecodeError:
                        continue
            except:
                continue
        
        # Check for Angular version in source code
        version_patterns = [
            r'@angular/core@([0-9.]+)',
            r'angular\.version\.full\s*=\s*["\']([0-9.]+)',
            r'ng-version="([0-9.]+)"'
        ]
        
        for pattern in version_patterns:
            match = re.search(pattern, response.text)
            if match:
                version = match.group(1)
                version_parts = version.split('.')
                
                if len(version_parts) >= 2:
                    major = int(version_parts[0])
                    minor = int(version_parts[1])
                    
                    # Check for vulnerable versions
                    if major < 13 or (major == 13 and minor < 3) or (major == 14 and minor < 2):
                        result['vulnerable'] = True
                        result['evidence'] = f"Vulnerable Angular version detected: {version}"
                        return result
        
        # Test for Angular Universal vulnerabilities
        universal_endpoints = [
            '/api/ssr',
            '/server-side',
            '/universal',
            '/_next/static',
            '/_angular'
        ]
        
        for endpoint in universal_endpoints:
            try:
                response = session.get(urljoin(target_url, endpoint), timeout=30)
                if response.status_code == 200:
                    # Check for server-side rendering vulnerabilities
                    if 'angular-universal' in response.text.lower():
                        result['vulnerable'] = True
                        result['evidence'] = f"Angular Universal detected at {endpoint} - potential SSR vulnerabilities"
                        return result
            except:
                continue
        
        # Test for Angular CLI vulnerabilities
        cli_endpoints = [
            '/.angular-cli.json',
            '/angular.json',
            '/workspace.json'
        ]
        
        for endpoint in cli_endpoints:
            try:
                response = session.get(urljoin(target_url, endpoint), timeout=30)
                if response.status_code == 200:
                    try:
                        cli_data = json.loads(response.text)
                        version = cli_data.get('version', '')
                        
                        if version and version.startswith('1.'):
                            result['vulnerable'] = True
                            result['evidence'] = f"Vulnerable Angular CLI version detected: {version}"
                            return result
                    except:
                        continue
            except:
                continue
        
        # Test for Angular Material vulnerabilities
        response = session.get(target_url, timeout=30)
        material_patterns = [
            r'@angular/material@([0-9.]+)',
            r'angular-material\.js',
            r'material\.angular\.js'
        ]
        
        for pattern in material_patterns:
            match = re.search(pattern, response.text)
            if match:
                if len(match.groups()) > 0:
                    version = match.group(1)
                    version_parts = version.split('.')
                    
                    if len(version_parts) >= 2:
                        major = int(version_parts[0])
                        minor = int(version_parts[1])
                        
                        # Check for vulnerable Material versions
                        if major < 13:
                            result['vulnerable'] = True
                            result['evidence'] = f"Vulnerable Angular Material version detected: {version}"
                            return result
        
        # Test for Angular router vulnerabilities
        router_payloads = [
            '../../../etc/passwd',
            '..\\..\\..\\windows\\system32\\drivers\\etc\\hosts',
            '/admin/../../../etc/passwd'
        ]
        
        for payload in router_payloads:
            try:
                response = session.get(urljoin(target_url, payload), timeout=30)
                
                if 'root:' in response.text or 'localhost' in response.text:
                    result['vulnerable'] = True
                    result['evidence'] = f"Angular router path traversal vulnerability detected with payload: {payload}"
                    return result
            except:
                continue
        
        # Test for Angular HTTP client vulnerabilities
        http_test_endpoints = ['/api/test', '/api/user', '/api/data']
        
        for endpoint in http_test_endpoints:
            try:
                # Test for CORS misconfigurations
                headers = {'Origin': 'https://evil.com'}
                response = session.get(urljoin(target_url, endpoint), headers=headers, timeout=30)
                
                if 'Access-Control-Allow-Origin' in response.headers:
                    origin = response.headers['Access-Control-Allow-Origin']
                    if origin == '*' or 'evil.com' in origin:
                        result['vulnerable'] = True
                        result['evidence'] = f"Angular HTTP client CORS vulnerability detected at {endpoint}"
                        return result
            except:
                continue
                
    except Exception as e:
        result['evidence'] = f"Error during scan: {str(e)}"
    
    return result