"""
CVE-2024-8372 Vulnerability Detection Script
Cross-Site Scripting (XSS) vulnerability detection for TronClass LMS
"""

import requests
import re
from urllib.parse import urljoin, quote

def scan(session, target_url):
    """
    Scan for CVE-2024-8372 vulnerability
    Cross-Site Scripting (XSS) vulnerability in user input fields
    """
    result = {
        'vulnerable': False,
        'evidence': '',
        'description': 'CVE-2024-8372: 跨站指令碼攻擊(XSS)弱點，攻擊者可注入惡意腳本執行任意程式碼',
        'remediation': '實施適當的輸入驗證和輸出編碼。使用內容安全政策(CSP)標頭。對所有用戶輸入進行清理和過濾。'
    }
    
    try:
        # XSS test payloads
        xss_payloads = [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "<svg onload=alert('XSS')>",
            "javascript:alert('XSS')",
            "'><script>alert('XSS')</script>",
            "\"><script>alert('XSS')</script>",
            "<iframe src=javascript:alert('XSS')>",
            "<body onload=alert('XSS')>",
            "<input onfocus=alert('XSS') autofocus>",
            "<select onfocus=alert('XSS') autofocus>"
        ]
        
        # Test endpoints for XSS
        test_endpoints = [
            '/search',
            '/profile',
            '/course',
            '/forum',
            '/comment',
            '/feedback',
            '/contact',
            '/message',
            '/quiz'
        ]
        
        for endpoint in test_endpoints:
            for payload in xss_payloads:
                try:
                    # Test GET parameters
                    response = session.get(
                        urljoin(target_url, endpoint),
                        params={'q': payload, 'search': payload, 'message': payload},
                        timeout=30
                    )
                    
                    if payload in response.text:
                        result['vulnerable'] = True
                        result['evidence'] = f"Reflected XSS found at {endpoint} with payload: {payload}"
                        return result
                    
                    # Test POST parameters
                    post_data = {
                        'comment': payload,
                        'message': payload,
                        'content': payload,
                        'description': payload,
                        'title': payload
                    }
                    
                    response = session.post(
                        urljoin(target_url, endpoint),
                        data=post_data,
                        timeout=30
                    )
                    
                    if payload in response.text:
                        result['vulnerable'] = True
                        result['evidence'] = f"Stored XSS found at {endpoint} with payload: {payload}"
                        return result
                        
                except:
                    continue
        
        # Test for DOM-based XSS
        dom_payloads = [
            "#<script>alert('XSS')</script>",
            "#javascript:alert('XSS')",
            "#<img src=x onerror=alert('XSS')>"
        ]
        
        for payload in dom_payloads:
            try:
                response = session.get(
                    target_url + payload,
                    timeout=30
                )
                
                # Check for JavaScript execution patterns
                if re.search(r'document\.write|innerHTML|eval\(', response.text):
                    result['vulnerable'] = True
                    result['evidence'] = f"Potential DOM XSS vulnerability detected with payload: {payload}"
                    break
            except:
                continue
        
        # Test for XSS in headers
        xss_headers = {
            'User-Agent': "<script>alert('XSS')</script>",
            'Referer': "<script>alert('XSS')</script>",
            'X-Forwarded-For': "<script>alert('XSS')</script>"
        }
        
        try:
            response = session.get(
                target_url,
                headers=xss_headers,
                timeout=30
            )
            
            for header_name, header_value in xss_headers.items():
                if header_value in response.text:
                    result['vulnerable'] = True
                    result['evidence'] = f"XSS vulnerability in {header_name} header"
                    break
        except:
            pass
        
        # Test for file upload XSS
        upload_endpoints = ['/upload', '/file/upload', '/media/upload']
        
        for endpoint in upload_endpoints:
            try:
                files = {'file': ('test.html', '<script>alert("XSS")</script>', 'text/html')}
                response = session.post(
                    urljoin(target_url, endpoint),
                    files=files,
                    timeout=30
                )
                
                if 'uploaded' in response.text.lower() or 'success' in response.text.lower():
                    result['vulnerable'] = True
                    result['evidence'] = f"File upload XSS vulnerability at {endpoint}"
                    break
            except:
                continue
                
    except Exception as e:
        result['evidence'] = f"Error during scan: {str(e)}"
    
    return result